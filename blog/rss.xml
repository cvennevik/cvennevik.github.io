<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Cecilie Vennevik's blog</title>
    <link>https://www.cvennevik.no/blog/</link>
    <description>Recent posts on Cecilie Vennevik's blog</description>
    <language>en</language>
    <lastBuildDate>Sat, 16 Aug 2025 12:30:00 GMT</lastBuildDate>
    <atom:link href="https://www.cvennevik.no/blog/rss.xml" rel="self" type="application/rss+xml"/>
    <item>
      <title>Crystal Spire #10: Finishing the easy bit</title>
      <link>https://www.cvennevik.no/blog/crystal-spire-10-finishing-the-easy-bit/</link>
      <pubDate>Sat, 16 Aug 2025 12:30:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/crystal-spire-10-finishing-the-easy-bit/</guid>
      <content:encoded><![CDATA[<p>Happy Saturday! Let's round up this game state business.</p>
<p>So, I'd forgotten that we already <em>do</em> have enemies' next move stored in state and rendered in the HTML. We just need to add their move history. Let's call it <code>moveHistory</code>.</p>
<pre><code class="language-js">{
    name: 'Jaw Worm',
    hp: 42,
    maxHp: 42,
    block: 0,
    nextMove: 'Chomp',
    moveHistory: [],
    buffs: [],
    debuffs: []
}
</code></pre>
<p>Then, for the &quot;end turn&quot; actions, add 'Chomp' to their move history:</p>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({
    ...defaultGameState,
    hp: 69,
    hand: ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'],
    discardPile: ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'],
    enemies: [{ ...defaultGameState.enemies[0], moveHistory: ['Chomp'] }]
}))}&quot;&gt;
    End turn 1 (60% chance)
&lt;/a&gt;
</code></pre>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({
    ...defaultGameState,
    hp: 69,
    hand: ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'],
    discardPile: ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'],
    enemies: [{ ...defaultGameState.enemies[0], moveHistory: ['Chomp'] }]
}))}&quot;&gt;
    End turn 2 (40% chance)
&lt;/a&gt;
</code></pre>
<p>Then finally, per enemy, display their move history:</p>
<pre><code class="language-js">${enemy.moveHistory.length &gt; 0 ? `&lt;p&gt;Past moves: ${enemy.moveHistory.join(', ')}&lt;/p&gt;` : ''}
</code></pre>
<p>Neat! Now the resulting states from the &quot;end turn&quot; action say &quot;Past moves: Chomp&quot;! Commit: <em>&quot;Add moveHistory to enemies&quot;</em>.</p>
<p>I noticed we don't update the Jaw Worm's next move in those URLs, so we need to fix that as well:</p>
<pre><code class="language-js">enemies: [{ ...defaultGameState.enemies[0], moveHistory: ['Chomp'], nextMove: 'Bellow' }]
</code></pre>
<pre><code class="language-js">enemies: [{ ...defaultGameState.enemies[0], moveHistory: ['Chomp'], nextMove: 'Thrash' }]
</code></pre>
<p>And then we'll need to update <code>moveDescriptions</code>:</p>
<pre><code class="language-js">let moveDescriptions = {
    'Chomp': 'Deal 11 damage',
    'Thrash': 'Deal 7 damage, gain 5 Block',
    'Bellow': 'Gain 3 Strength and 6 Block'
};
</code></pre>
<p>Done! Commit: <em>&quot;Update enemy nextMove in action URLs&quot;</em>.</p>
<p>We're now able to render any game state in the fight based on URL parameters. Nice.</p>
<hr>
<p>The next step will be a little more complicated. Those hardcoded actions and outcomes need to go, and we need to generate real ones based on the current game state. Once we have that, we'll be truly able to navigate through the entire fight.</p>
<p>I've been thinking about this a lot since last time, so let's establish some key concepts:</p>
<ul>
<li>An <strong>action</strong> is something the player can do anytime they're offered a choice. Examples:
<ul>
<li>Play a card</li>
<li>Use a potion</li>
<li>End the turn</li>
<li>Make a choice an effect asks of them (e.g. after drawing a card, <em>Warcry</em> asks you to place a card in hand back on top of the deck )</li>
</ul>
</li>
<li>An <strong>outcome</strong> is a resulting game state from an action.
<ul>
<li>An action may have multiple potential outcomes when randomness is involved (e.g. which cards you draw, what next move the enemy picks, etc.)</li>
</ul>
</li>
</ul>
<p>Based on this, I think we want two functions:</p>
<ul>
<li><code>getActions(gameState)</code> returns the actions you can take in a given game state.</li>
<li><code>getOutcomes(gameState, action)</code> returns the potential outcomes of an action, including the probability of each outcome.</li>
</ul>
<p>There's lots of ways we could structure the return values of these. In my first go implementing this in C#, &quot;action&quot; objects were tied to the game state they came from, and could <code>.Resolve()</code> to their potential outcomes. I'm going to try restricting actions and outcomes to be pure data this time around, on the hunch that shuffling pure data around will be easier to optimize for performance later than shuffling functions or methods around.</p>
<p>We can start out with this simple schema for actions:</p>
<pre><code class="language-js">{ name: 'Play Defend' }
</code></pre>
<p>Every action has a <code>name</code> property. Some actions may have additional properties:</p>
<pre><code class="language-js">{ name: 'Play Strike', enemyIndex: 0 }
</code></pre>
<p>We can write our <code>getOutcomes</code> function to read the additional properties only as needed, with different blocks of logic running depending on the action's <code>name</code>, which leaves a lot of flexibility for implementing future actions.</p>
<p>The outcome schema can be similarly simple:</p>
<pre><code class="language-js">{ gameState: gameState, probability: 0.6 }
</code></pre>
<p>Given this rough plan, we can break it down into three sequential steps:</p>
<ol>
<li>Implement <code>getActions</code></li>
<li>Implement <code>getOutcomes</code></li>
<li>Update our rendering logic to use these.</li>
</ol>
<p>Starting with step 1... &quot;Implement <code>getActions</code>&quot; seems a lot more complicated than anything we've done so far. Let's describe the requirements in plain English first, as far as they apply to the Jaw Worm fight:</p>
<ul>
<li>If we have <em>Strike</em> in hand and 1 or more Energy, we can 'Play Strike' on the Jaw Worm.</li>
<li>If we have <em>Bash</em> in hand and 2 or more Energy, we can 'Play Bash' on the Jaw Worm.</li>
<li>If we have <em>Defend</em> in hand and 1 or more Energy, we can 'Play Defend'.</li>
<li>We can always 'End Turn'.</li>
</ul>
<p>Oh. When we put it like this, it looks really straightforward to implement, actually.</p>
<pre><code class="language-js">function getActions(gameState) {
    let actions = [];
    if (gameState.hand.includes('Strike') &amp;&amp; gameState.energy &gt;= 1) {
        actions.push({ name: 'Play Strike', enemyIndex: 0 });
    }
    if (gameState.hand.includes('Bash') &amp;&amp; gameState.energy &gt;= 2) {
        actions.push({ name: 'Play Bash', enemyIndex: 0 });
    }
    if (gameState.hand.includes('Defend') &amp;&amp; gameState.energy &gt;= 1) {
        actions.push({ name: 'Play Defend' });
    }
    actions.push('End Turn');
    return actions;
}
</code></pre>
<p>Although, now I realize there are lots of cases our requirements don't handle. What if we're dead? What if we have multiple enemies?</p>
<p>And for that matter, how do we check that this code even works? So far, we've been refreshing the page, clicking around and seeing if everything looks correct, but now we have a lot more cases to check, and this isn't even wired up to the page yet.</p>
<p>I think this is the signal to start writing tests. For now, let's leave a comment above the function:</p>
<pre><code class="language-js">// TODO: Test
</code></pre>
<p>And commit: <em>&quot;Add getActions function</em>&quot;.</p>
<p>Next time: setting up our first tests!</p>
<hr>
<p><em><a href="/crystal-spire/v10/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/3ef1ac5b8d289ab1352c6abde946c20c29fa527e">Last commit: Add getActions function</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Crystal Spire #9: Buffing the Worm&#39;s nails</title>
      <link>https://www.cvennevik.no/blog/crystal-spire-09-buffing-the-worms-nails/</link>
      <pubDate>Sat, 09 Aug 2025 13:00:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/crystal-spire-09-buffing-the-worms-nails/</guid>
      <content:encoded><![CDATA[<p>Small quality-of-life update: There is now a link at the bottom of each post in this series to a runnable version of the app, precisely as it was at the time of writing.</p>
<hr>
<p>The goal this time is to add enemy armor, buffs and debuffs to the dynamic state. The Jaw Worm gains armor and the Strength buff when using <em>Bellow</em>, and... hold up, I think I have some inconsistent terminology here.</p>
<p>Double-checking, and yes, it's not called &quot;armor&quot;, it's called &quot;block&quot;. Let's search, replace and commit: <em>&quot;Rename 'Armor' to 'Block'&quot;</em>.</p>
<p>Take two: The goal this time is to add enemy <em>block</em>, buffs and debuffs. The Jaw Worm gains block and the Strength buff when using <em>Bellow</em>, and gains the Vulnerable debuff when we play <em>Bash</em>.</p>
<p>Adding Vulnerable seems most straightforward, since we already have an action that's supposed to add it. We can add a <code>debuffs</code> property to the default Jaw Worm enemy object:</p>
<pre><code class="language-js">{
    name: 'Jaw Worm',
    hp: 42,
    maxHp: 42,
    nextMove: 'Chomp',
    debuffs: []
}
</code></pre>
<p>Then, we need to update the serialized &quot;enemies&quot; data in our URLs, to make sure they include the <code>debuffs</code> array. This is a bit of a pain, as I had to look up how to URI encode JSON again, and the strings I get now have less characters replaced than what's committed from before, which makes me nervous I'm doing it wrong. The data seems to deserialize fine, though, so let's just commit: <em>&quot;Add 'debuffs' array to enemy state&quot;</em>.</p>
<hr>
<p>Before we go any further, I want to reduce the pain of updating the URLs. Let's refactor and add some helpful functions. I want a <code>serialize</code> function that takes a game state object and serializes it to a URL query string, and I want a <code>deserialize</code> function that takes a URL query string and deserializes it to a game state object.</p>
<p>Step one: gather all our state variables into a single object.</p>
<pre><code class="language-js">let gameState = {
    hp: queryParams.get('hp') ?? 80,
    maxHp: queryParams.get('maxhp') ?? 80,
    block: queryParams.get('block'),
    energy: queryParams.get('energy') ?? 3,
    maxEnergy: queryParams.get('maxenergy') ?? 3,
    hand: queryParams.get('hand')?.split(',') ?? ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'],
    drawPile: queryParams.get('draw')?.split(',') ?? ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'],
    discardPile: queryParams.get('discard')?.split(',') ?? [],
    relics: queryParams.get('relics')?.split(',') ?? ['Burning Blood'],
    enemies: JSON.parse(queryParams.get('enemies')) ?? [
        {
            name: 'Jaw Worm',
            hp: 42,
            maxHp: 42,
            nextMove: 'Chomp',
            debuffs: []
        }
    ]
}
</code></pre>
<p>This also requires adding <code>gameState.</code> in front of everywhere we use these variables, e.g. <code>&lt;p&gt;HP: ${gameState.hp}/${gameState.maxHp}&lt;/p&gt;</code>. The page still loads fine, so this seems committable: <em>&quot;Gather game state variables into a gameState object&quot;</em>.</p>
<p>Step two: move our deserialization code into a <code>deserialize</code> function.</p>
<pre><code class="language-js">function deserialize(queryString) {
    let queryParams = new URLSearchParams(queryString);
    return  {
        hp: queryParams.get('hp') ?? 80,
        maxHp: queryParams.get('maxhp') ?? 80,
        block: queryParams.get('block'),
        energy: queryParams.get('energy') ?? 3,
        maxEnergy: queryParams.get('maxenergy') ?? 3,
        hand: queryParams.get('hand')?.split(',') ?? ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'],
        drawPile: queryParams.get('draw')?.split(',') ?? ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'],
        discardPile: queryParams.get('discard')?.split(',') ?? [],
        relics: queryParams.get('relics')?.split(',') ?? ['Burning Blood'],
        enemies: JSON.parse(queryParams.get('enemies')) ?? [
            {
                name: 'Jaw Worm',
                hp: 42,
                maxHp: 42,
                nextMove: 'Chomp',
                debuffs: []
            }
        ]
    }
}

let gameState = deserialize(window.location.search);
</code></pre>
<p>Runs fine, commit: <em>&quot;Extract deserialize(queryString) function&quot;</em>.</p>
<p>Step three: write a <code>serialize</code> function, and use it to generate the URLs we need.</p>
<pre><code class="language-js">function serialize(gameState) {
    return `?hp=${gameState.hp}`
        + `&amp;maxhp=${gameState.maxHp}`
        + `&amp;block=${gameState.block}`
        + `&amp;energy=${gameState.energy}`
        + `&amp;maxenergy=${gameState.maxEnergy}`
        + `&amp;hand=${String.join(gameState.hand, ',')}`
        + `&amp;draw=${String.join(gameState.drawPile, ',')}`
        + `&amp;discard=${String.join(gameState.discardPile, ',')}`
        + `&amp;relics=${String.join(gameState.relics, ',')}`
        + `&amp;enemies=${JSON.stringify(gameState.enemies)}`;
}
</code></pre>
<p>I <em>think</em> I did that right, so let's test it out:</p>
<pre><code>&lt;a href=&quot;${encodeURI(serialize({ ...gameState, energy: 1, hand: ['Defend', 'Defend', 'Defend', 'Strike'], discardPile: ['Bash'], enemies: [{ ...gameState.enemies[0], hp: 34 }]}))}&quot;&gt;
    Play Bash on Jaw Worm
&lt;/a&gt;
</code></pre>
<p>Still some effort to write out, but somewhat easier to read and modify. Testing it out, we get an error in the console: <em>&quot;Uncaught TypeError: String.join is not a function&quot;</em>. Whoops, I forgot how joining an array into a string works. This should work instead:</p>
<pre><code class="language-js">        + `&amp;hand=${gameState.hand.join(',')}`
        + `&amp;draw=${gameState.drawPile.join(',')}`
        + `&amp;discard=${gameState.discardPile.join(',')}`
        + `&amp;relics=${gameState.relics.join(',')}`
</code></pre>
<p>Success! The page renders, the URL looks alright, and clicking on it renders a correctly updated page! ...mostly.</p>
<p>Below player HP it now says:</p>
<pre><code>Block: null
</code></pre>
<p>That doesn't look right. When we don't have block, it gets serialized as the string &quot;null&quot;. Having no block probably shouldn't be stored as <code>null</code>. Storing it as 0 sounds correct, and since 0 is falsy, the templating logic we've written should still work.</p>
<p>Update <code>deserialize</code> to default <code>block</code> to 0:</p>
<pre><code class="language-js">        block: queryParams.get('block') ?? 0,
</code></pre>
<p>Bingo! Works like a charm now. Let's rewrite the remaining four URLs:</p>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...gameState, energy: 2, hand: ['Bash', 'Defend', 'Defend', 'Defend'], discardPile: ['Strike'], enemies: [{ ...gameState.enemies[0], hp: 36 }] }))}&quot;&gt;
    Play Strike on Jaw Worm
&lt;/a&gt;
</code></pre>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...gameState, block: 5, energy: 2, hand: ['Bash', 'Defend', 'Defend', 'Strike'], discardPile: ['Defend'] }))}&quot;&gt;
    Play Defend
&lt;/a&gt;
</code></pre>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...gameState, hp: 69, hand: ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'], discardPile: ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'] }))}&quot;&gt;
    End turn 1 (60% chance)
&lt;/a&gt;
</code></pre>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...gameState, hp: 69, hand: ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'], discardPile: ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'] }))}&quot;&gt;
    End turn 2 (40% chance)
&lt;/a&gt;
</code></pre>
<p>Yes, far more readable. And it all seems to work! Though, clicking around, it seems that by using <code>gameState</code> to produce our URLs, we can now end up in game states that partially combine the effects of each action. For instance, clicking &quot;Play Strike on Jaw Worm&quot; then &quot;Play Defend&quot; puts us in a state where we have 5 Block <em>and</em> the Jaw Worm has 36 HP. It's not a valid state, since we still have 2 Energy left and Strike in hand, but hey, kind of neat. Commit: <em>&quot;Create URLs with new serialize function&quot;</em>.</p>
<p>Neat as that bug is, let's clean it up by creating a <code>defaultGameState</code> and basing default state and the action URLs on that.</p>
<pre><code class="language-js">let defaultGameState = {
    hp: 80,
    maxHp: 80,
    block: 0,
    energy: 3,
    maxEnergy: 3,
    hand: ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'],
    drawPile: ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'],
    discardPile: [],
    relics: ['Burning Blood'],
    enemies: [
        {
            name: 'Jaw Worm',
            hp: 42,
            maxHp: 42,
            nextMove: 'Chomp',
            debuffs: []
        }
    ]
};
</code></pre>
<p>Now we can use that state if the URL has no query string, and remove the default values from <code>deserialize</code>, since every query string will now have fully serialized game state data:</p>
<pre><code class="language-js">let gameState = window.location.search ? deserialize(window.location.search) : defaultGameState;
</code></pre>
<pre><code class="language-js">function deserialize(queryString) {
    let queryParams = new URLSearchParams(queryString);
    return {
        hp: queryParams.get('hp'),
        maxHp: queryParams.get('maxhp'),
        block: queryParams.get('block'),
        energy: queryParams.get('energy'),
        maxEnergy: queryParams.get('maxenergy'),
        hand: queryParams.get('hand')?.split(','),
        drawPile: queryParams.get('draw')?.split(','),
        discardPile: queryParams.get('discard')?.split(','),
        relics: queryParams.get('relics')?.split(','),
        enemies: JSON.parse(queryParams.get('enemies'))
    }
}
</code></pre>
<p>Seems to work. Commit: <em>&quot;Replace defaults in deserialize() with defaultGameState object&quot;</em>. Then, replace our use of <code>gameState</code> with <code>defaultGameState</code> when generating URLs, like so:</p>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...defaultGameState, energy: 1, hand: ['Defend', 'Defend', 'Defend', 'Strike'], discardPile: ['Bash'], enemies: [{ ...defaultGameState.enemies[0], hp: 34 }] }))}&quot;&gt;
    Play Bash on Jaw Worm
&lt;/a&gt;
</code></pre>
<p>Now the URLs stay consistent regardless of current game state. Commit: <em>&quot;Base URLs on defaultGameState instead of current gameState&quot;</em>.</p>
<p>Whoops. Seems to be a bug now where zero block gets deserialized as the string <code>&quot;0&quot;</code>, so the page says &quot;Block: 0&quot;. Let's update <code>deserialize</code> to convert strings to numbers where appropriate:</p>
<pre><code class="language-js">    hp: Number(queryParams.get('hp')),
    maxHp: Number(queryParams.get('maxhp')),
    block: Number(queryParams.get('block')),
    energy: Number(queryParams.get('energy')),
    maxEnergy: Number(queryParams.get('maxenergy')),
</code></pre>
<p>That fixes it. Commit: <em>&quot;Correctly deserialize number properties as numbers instead of strings&quot;</em></p>
<hr>
<p>Whew. I think that's enough refactoring done to the point where we can continue adding the Vulnerable debuff.</p>
<p>We need to store two aspects of debuffs in state: which debuff it is (by its name, probably), and how many &quot;stacks&quot; it has. Most buffs and debuffs are stackable, which either intensifies it (in Strength's case) or increases its duration (in Vulnerable's case).</p>
<p>Going off of this, we could represent the Vulnerable debuff as an object:</p>
<pre><code class="language-js">{ name: 'Vulnerable', stacks: 2 }
</code></pre>
<p>Add it to the enemy's <code>debuffs</code> when playing <em>Bash</em>:</p>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...defaultGameState, energy: 1, hand: ['Defend', 'Defend', 'Defend', 'Strike'], discardPile: ['Bash'], enemies: [{ ...defaultGameState.enemies[0], hp: 34, debuffs: [{ name: 'Vulnerable', stacks: 2 }] }] }))}&quot;&gt;
    Play Bash on Jaw Worm
&lt;/a&gt;
</code></pre>
<p>Then for each enemy, render <code>enemy.debuffs</code> similarly to how we render cards and relics:</p>
<pre><code class="language-js">&lt;details open&gt;
    &lt;summary&gt;Debuffs (${enemy.debuffs.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${enemy.debuffs.map(debuff =&gt;
            `&lt;li&gt;${debuff.name} (${debuff.stacks})&lt;/li&gt;`
        ).join('')}
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>Putting it all together, it works! That was easy enough. Though I'm not sure I like displaying a collapsible list of zero debuffs, so let's only render it when the enemy has at least one debuff:</p>
<pre><code class="language-js">${enemy.debuffs.length &gt; 0 ?
`&lt;details open&gt;
    &lt;summary&gt;Debuffs (${enemy.debuffs.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${enemy.debuffs.map(debuff =&gt; `&lt;li&gt;${debuff.name} (${debuff.stacks})&lt;/li&gt;`).join('')}
    &lt;/ul&gt;
&lt;/details&gt;`
: ''}
</code></pre>
<p>Looks better. Now we can commit: <em>&quot;Add Vulnerable debuff when playing Bash&quot;</em>.</p>
<hr>
<p>For adding enemy block and Strength, none of the existing links in our template should lead to that, as the Jaw Worm is not about to use <em>Bellow</em>. To work around this, we can add a test link to the bottom of the page.</p>
<pre><code class="language-js">&lt;h2&gt;Test links&lt;/h2&gt;
&lt;a href=&quot;${encodeURI(serialize({ ...defaultGameState /* TODO: assign strength and block */ }))}&quot;&gt;
    Jaw Worm with 3 Strength and 6 Block
&lt;/a&gt;
</code></pre>
<p>Enemy block can be a <code>block</code> property, enemy buffs can be a <code>buffs</code> property, and each buff can have a <code>name</code> and <code>stacks</code>, just like debuffs.</p>
<p>We add the properties to our default game state:</p>
<pre><code class="language-js">{
    name: 'Jaw Worm',
    hp: 42,
    maxHp: 42,
    block: 0,
    nextMove: 'Chomp',
    buffs: [],
    debuffs: []
}
</code></pre>
<p>Update <code>block</code> and <code>buffs</code> in our test link:</p>
<pre><code class="language-js">&lt;a href=&quot;${encodeURI(serialize({ ...defaultGameState, enemies: [{ ...defaultGameState.enemies[0], block: 6, buffs: [{ name: 'Strength', stacks: 3 }] }] }))}&quot;&gt;
    Jaw Worm with 3 Strength and 6 Block
&lt;/a&gt;
</code></pre>
<p>Then render enemy block and buffs like we render player block and enemy debuffs:</p>
<pre><code class="language-js">${enemy.block ? `&lt;p&gt;Block: ${enemy.block}&lt;/p&gt;` : ''}
</code></pre>
<pre><code class="language-js">${enemy.buffs.length &gt; 0 ?
`&lt;details open&gt;
    &lt;summary&gt;Buffs (${enemy.buffs.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${enemy.buffs.map(buff =&gt; `&lt;li&gt;${buff.name} (${buff.stacks})&lt;/li&gt;`).join('')}
    &lt;/ul&gt;
&lt;/details&gt;`
: ''}
</code></pre>
<p>Save, reload the page - curious, the page fails to render, and we have an error in the console: <em>&quot;Uncaught TypeError: can't access property &quot;length&quot;, enemy.buffs is undefined&quot;</em>. Turns out I have an old serialied state in the URL where <code>buffs</code> doesn't exist yet. Clearing the query string fixes it.</p>
<p>Now, clicking the test link, it says the Jaw Worm has 6 Block and a 3 Strength. Success! We can commit: <em>&quot;Add enemy block and buffs, add test link for this&quot;</em>.</p>
<hr>
<p>I'm fairly happy with progress this time. We have more maintainable code for serializing and deserializing game state, our action links are easier to keep up-to-date, and a little more of the game state is now representable.</p>
<p>If my counting is correct, the only piece of game state missing to be able to represent any moment in the Jaw Worm fight is the Jaw Worm's next move and its history of previous moves (to determine possible next moves). A good task for next time.</p>
<hr>
<p><em><a href="/crystal-spire/v9/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/e7139b1d6117008c221f849c19d693bec3404e32">Last commit: Set 'enemies' array based on query parameter</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Crystal Spire #8: Facing our enemies</title>
      <link>https://www.cvennevik.no/blog/crystal-spire-08-facing-our-enemies/</link>
      <pubDate>Sat, 01 Feb 2025 15:38:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/crystal-spire-08-facing-our-enemies/</guid>
      <content:encoded><![CDATA[<p>Happy new year! Parenting is going great. We just moved my home computer out of the living room and into my office, so now, for the first time in a long while, I have comfortable spot to code in. The baby is napping longer and more consistently, too, so let's use a little of that time to chip away at this again. Dust off those programming muscles.</p>
<p>There's still a fair bit of game state to make dynamic, namely the enemy. This fight has one enemy, but there can be several enemies, and each of them has:</p>
<ul>
<li>A name</li>
<li>HP</li>
<li>Armor</li>
<li>Buffs and debuffs</li>
<li>Its next move</li>
<li>A history of previous moves
<ul>
<li>This affects which move it may choose next</li>
</ul>
</li>
</ul>
<p>All of these need to be made into a variable (an array of &quot;enemy&quot; objects, most likely), and then we need a way to encode it into the query string. Let's save the tricky bit for later, and hard-code the data first:</p>
<pre><code class="language-js">let enemies = [
    {
        name: 'Jaw Worm',
        hp: 42,
        maxHp: 42,
        nextMove: 'Chomp'
    }
];
</code></pre>
<p>Then use the data in our templating:</p>
<pre><code class="language-js">&lt;h2&gt;Enemies&lt;/h2&gt;
${enemies.map(enemy =&gt; `
    &lt;h3&gt;${enemy.name}&lt;/h3&gt;
    &lt;p&gt;HP: ${enemy.hp}/${enemy.maxHp}&lt;/p&gt;
    &lt;p&gt;Next move: ${enemy.nextMove}&lt;/p&gt;
`).join('')}
</code></pre>
<p>Looks okay, but we're missing the move description now. I don't think this is the long-term solution, but let's make a dictionary of descriptions, just like we did for relics, to keep it out of the dynamic state.</p>
<pre><code class="language-js">let moveDescriptions = { 'Chomp': 'Deal 11 damage' };
// ...
&lt;p&gt;Next move: ${enemy.nextMove} (${moveDescriptions[enemy.nextMove]})&lt;/p&gt;
</code></pre>
<p>Oh yeah, this is going to be a problem very soon. The Jaw Worm deals more than 11 damage when it gains strength, so a static dictionary of descriptions is not going to cut it. That's a future problem though, and an interesting one at that. Future us can spend a whole session figuring that out.</p>
<p>Commit: &quot;Render enemies based on 'enemies' array&quot;.</p>
<p>Now the difficult part. We need to encode this data, this array of objects, into our query string. We've only handled simple values and lists of simple values to this point. We need a different method for handling a list of objects.</p>
<p>Starting with the simplest thing that will possibly work... Can we just parse it as JSON?</p>
<pre><code class="language-js">let enemies = JSON.parse(queryParams.get('enemies')) ?? [
    {
        name: 'Jaw Worm',
        hp: 42,
        maxHp: 42,
        nextMove: 'Chomp'
    }
];
</code></pre>
<p>Well, the fallback value works correctly when &quot;enemies&quot; is missing from the query string.</p>
<p>Now what if we add <code>?enemies=[]</code> to it? Aha! No enemies!</p>
<p>Then what about <code>?enemies=[{&quot;name&quot;: &quot;Jaw Worm&quot;, &quot;hp&quot;: 30, &quot;maxHp&quot;: 42, &quot;nextMove&quot;: &quot;Chomp&quot;}]</code>? Goodness, me, it works. Didn't even need to deal with URI encoding.</p>
<p>Let's add this query parameter to our sketched action links, so we can finally see our attacks dealing damage:</p>
<pre><code class="language-js">&lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;energy=1&amp;hand=Defend,Defend,Defend,Strike&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Bash&amp;enemies=%5B%7B%22name%22%3A%20%22Jaw%20Worm%22%2C%20%22hp%22%3A%2034%2C%20%22maxHp%22%3A%2042%2C%20%22nextMove%22%3A%20%22Chomp%22%7D%5D&quot;&gt;
    Play Bash on Jaw Worm
&lt;/a&gt;
// ...
&lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;energy=2&amp;hand=Bash,Defend,Defend,Defend&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Strike&amp;enemies=%5B%7B%22name%22%3A%20%22Jaw%20Worm%22%2C%20%22hp%22%3A%2036%2C%20%22maxHp%22%3A%2042%2C%20%22nextMove%22%3A%20%22Chomp%22%7D%5D&quot;&gt;
    Play Strike on Jaw Worm
&lt;/a&gt;
</code></pre>
<p>Had to URI-encode the array to fit it into the HTML, but the JSON parsing still works. And these links work! We're dealing damage!</p>
<p>Commit: &quot;Set 'enemies' array based on query parameter&quot;.</p>
<p>All this URL parsing is very space-inefficient, but I don't think it the URL will grow long enough to cause issues while we're only running the Jaw Worm fight. It's good enough for now.</p>
<p>Hm, I keep excusing design flaws that I imagine we will fix later. I wonder if that's necessary.</p>
<p>Anyway. Next time: enemy armor, buffs, and debuffs.</p>
<hr>
<p><em><a href="/crystal-spire/v8/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/fe7c1d1bcd8ecaa20f4ef01108a4854c0cb896b9">Last commit: Set 'enemies' array based on query parameter</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Crystal Spire #7: Armor</title>
      <link>https://www.cvennevik.no/blog/crystal-spire-07-armor/</link>
      <pubDate>Sat, 24 Aug 2024 09:30:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/crystal-spire-07-armor/</guid>
      <content:encoded><![CDATA[<p>We're back! With an updated series title! Nearly two weeks since the last post now. Hard to find time to write as a working parent.</p>
<p>Currently, our page is a bit of dynamically rendered HTML. Some of the content is based on the query string, others are hard-coded. The next logical step is making a little bit less of it hard-coded. Adding armor seems like a nice way to warm up.</p>
<p>Hmm. First I want to do a little refactoring. I want to extract our JavaScript to a separate file. It's not strictly necessary, and has a couple of cons (like adding another round-trip time on first page load, and not being able to throw our whole project around as a single HTML file), but it has several pros that I want right now:</p>
<ul>
<li>We can look at all the already-getting-quite-hairy parsing logic and templating without looking at all the HTML wrapping it.</li>
<li>We can comfortably remove one level of indentation.</li>
<li>Down the line, we want to be able to <em>test</em> the code, and having a separate file we can import the code from will help us out a lot.</li>
</ul>
<p>So, creating a file... What's the default name people give JavaScript files now, anyway? script.js? main.js? index.js? index.js lines up neatly with index.html in the file explorer, so let's go with that.</p>
<p>Wow, I've forgotten how to link to external JavaScript files from HTML, it's been so long since I set up a new project without a build system. Quick jump to the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script">MDN <code>&lt;script&gt;</code> element page</a>...</p>
<p>Whew, there's quite a few attributes to choose from nowadays! But after copying and pasting our JavaScript to the new file, it looks like we don't need any of the <code>type</code> or <code>async</code> or <code>defer</code> stuff, all we need to write is:</p>
<pre><code class="language-html">&lt;script src=&quot;index.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>I'm wondering if we should also add <code>type=&quot;module&quot;</code>. JavaScript modules are the modern way of structuring code, but a quick scan of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">the JavaScript modules page</a> reminds me that, yeah, it only really matters for exporting and importing code, and I'm not planning on splitting index.js into multiple files anytime soon. Let's keep it dead simple and omit it.</p>
<p>Commit: &quot;Extract JavaScript to index.js&quot;.</p>
<p>Back to armor. Let's start by sketching it up in hardcoded HTML:</p>
<pre><code class="language-html">&lt;p&gt;Armor: 5&lt;/p&gt;
</code></pre>
<p>Yeah, that's simple. And when there is no armor, we want to omit that paragraph entirely. Let's make it dynamic by adding a query parameter for &quot;armor&quot;:</p>
<pre><code class="language-js">let armor = queryParams.get('armor');
</code></pre>
<p>We're not assigning a fallback value here if &quot;armor&quot; is missing, because a <code>null</code> value is going to work fine the way we'll use it:</p>
<pre><code class="language-js">${armor ? `&lt;p&gt;Armor: ${armor}&lt;/p&gt;` : ''}
</code></pre>
<p>JavaScript type coercion is great, actually. If <code>armor</code> is any kind of <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy value</a>, like <code>null</code>, <code>undefined</code>, or <code>0</code>, it evaluates to <code>false</code> and we render an empty string. If it has a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy">truthy value</a> - in other words, if we have any kind of armor - we render it in a paragraph. This is really handy and terse! But we need to see that it works, first. Let's add <code>&amp;armor=5</code> to our &quot;Play Defend&quot; query string:</p>
<pre><code class="language-html">&lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;armor=5&amp;energy=2&amp;hand=Bash,Defend,Defend,Strike&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Defend&quot;&gt;
    Play Defend
&lt;/a&gt;
</code></pre>
<p>Wow, these URLs are getting terribly long. But it works! We get &quot;Armor: 5&quot; on that page, and nothing on the others. Commit: &quot;Render armor based on query parameter&quot;</p>
<p>Ah, my hour is already up. Small progress, but progress nonetheless.</p>
<hr>
<p><em><a href="/crystal-spire/v7/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/bc434acde371050735ad5e59736efdcb6ca71861/">Last commit: Render armor based on query parameter</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #6: Let&#39;s go to Codeberg!</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-06-lets-go-to-codeberg/</link>
      <pubDate>Sun, 11 Aug 2024 20:30:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-06-lets-go-to-codeberg/</guid>
      <content:encoded><![CDATA[<p>It's been a week since the last post of this series now, so I can definitely say that the pace of this series is slowing down after the end-of-holiday rush.</p>
<p>I've been thinking, for this project, that I want to make things fit into little steps, little sessions. If all I have is a little less than an hour, then I want to be able to fit writing a post and making some progress into that little hour. I have a few minutes to spare this evening, so let's see if we can put something out this week and give this thing a little heartbeat.</p>
<hr>
<p>I think it's time we set up version control for this. I want to have the file backed up somewhere else, I want to have a version history I can look back through, and I want to be able to link to specific snapshots of the code in these posts. No time better than now to get that set up.</p>
<p>Currently I host all my code on GitHub. I've thought about moving to a different host for anti-GitHub-Microsoft-monopoly reasons, but...</p>
<p>I was going to say I don't have time to set it up elsewhere right now, but do I know that's true? Let's set this project up on another Git hosting service I've been vaguely aware of: <a href="https://codeberg.org/">Codeberg</a>. It's a &quot;democratic, community-driven non-profit.&quot; Sounds neat!</p>
<h2>Step 1: Create account</h2>
<ul>
<li>Took me a couple of minutes, mostly waiting for the &quot;confirm your account&quot; email to show up.</li>
</ul>
<h2>Step 2: Go to settings and set up the SSH keys I expect I'll need</h2>
<ul>
<li>Oh hey I can set my pronouns for my profile here! Neat.</li>
<li>I already have an SSH public/private key pair set up locally, so probably I can just add my public key to Codeberg...?</li>
<li>Yup! Looks like it worked.</li>
</ul>
<h2>Step 3: Create a repository for our project</h2>
<ul>
<li>Gah, I already have a project named &quot;slay-the-spire-solver&quot; from my 2022 go at this. And naming it generically would be <em>boring</em>.</li>
<li>I think... I can make a swing for it an pick a name for the project now. What about...</li>
<li><strong>Crystal Spire?</strong></li>
<li>It's <em>just</em> unique enough (searching for it online gives me results for a World of Warcraft quest/item, I'm fine colliding with that), and crystal is a sort of material you can see through, but can also split light many, many ways? Sort of like we want to look through battles throughout the Spire?</li>
<li>That's it, I'm committing to it. <a href="https://codeberg.org/cvennevik/crystal-spire">cvennevik/crystal-spire</a> created. Description: &quot;A tool for analyzing combat encounters in Slay the Spire.&quot;</li>
</ul>
<h2>Step 4: Initialize the repository with our code</h2>
<ul>
<li>Okay so I want to do something here that will make this step harder. I want to create commits, retroactively, for the state of the code after each of the blog posts that I've written so far. I think it would be fun to follow the evolution of the project step by step like that.</li>
<li>I'll create a fresh &quot;crystal-spire&quot; directory on my computer and initialize the Git repository there.</li>
<li>Then, following my old blog posts, copying and pasting, let's see what we get...
<ul>
<li>First post. Create an initial index.html. <a href="https://codeberg.org/cvennevik/crystal-spire/commit/13ea21e15f66564b20ea0972187ce772c4437653">Commit: <em>&quot;#1: HTML first&quot;</em></a>.</li>
<li>Second post. <a href="https://codeberg.org/cvennevik/crystal-spire/commit/2fb0c59bcc6ab0799d350b69c9859b1059b7d95d">Commit: <em>&quot;#2: Actions and consequences&quot;</em></a>.</li>
<li>Third post. <a href="https://codeberg.org/cvennevik/crystal-spire/commit/12d6098e07ecd5de448b3d76e96805c9496145bb">Commit: <em>&quot;#3: Introducing links&quot;</em></a>.</li>
<li>Fourth post has no code changes.</li>
<li>Fifth post. Phew, here I can just copy and paste my latest version. <a href="https://codeberg.org/cvennevik/crystal-spire/commit/f6b46cd46502af1e872869ac2c8f6de71cfaa657">Commit: <em>&quot;#5: Going dynamic&quot;</em></a>.</li>
</ul>
</li>
</ul>
<p>And... that's it. The project is now version controlled. This is very comforting to me, as I like to use Git to keep track of current changes, and I commit frequently. When something's broken or half-done, it's stressful to me to have a lot of code in the air. I like being able to scrap everything I've done and return to a last known healthy point. Especially for a project like this that I want to make friendly to my short attention spans.</p>
<p>I'm going to go back and put links to these in all the previous posts. Ideally, I'd also want a link to the live version of the code at each version, so you can check it out and play around, but that looks non-trivial. Another time, maybe.</p>
<p>Now. One extra commit. To make the naming consistent.</p>
<pre><code class="language-html">&lt;title&gt;Crystal Spire&lt;/title&gt;
</code></pre>
<pre><code class="language-html">&lt;h1&gt;Crystal Spire&lt;/h1&gt;
</code></pre>
<p>Commit: &quot;Rename to Crystal Spire&quot;.</p>
<p>That's nice.</p>
<hr>
<p><em><a href="/crystal-spire/v6/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/2110563631b80369ec3d862d730d0b902e77a8b3/index.html">Last commit: &quot;Rename to Crystal Spire&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I can do hard things</title>
      <link>https://www.cvennevik.no/blog/i-can-do-hard-things/</link>
      <pubDate>Sun, 11 Aug 2024 09:00:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/i-can-do-hard-things/</guid>
      <content:encoded><![CDATA[<p>A couple of days ago a friend shared the post <a href="https://heydingus.net/blog/2024/8/you-and-i-can-do-hard-things">&quot;You (And I) Can Do Hard Things&quot; by Jarrod Blundy</a>. It placed the phrase &quot;you can do hard things&quot; squarely into my mind where it has been bouncing around since.</p>
<p>This morning I read <a href="https://angryweasel.substack.com/p/learning-and-hacking">&quot;Learning and Hacking&quot; by Alan Page</a>, which includes a copy of the essay &quot;Always Put Yourself On The Steepest Learning Curve.&quot; And now that's bouncing around in my mind too.</p>
<p>Add a shot of recent personal events, shake vigorously, and now I am <strong>losing my mind</strong>.</p>
<p>This week I crashed headfirst into what I'm being forced to call &quot;burnout,&quot; and I've realized that part of what brought it on is being persistently under-challenged. I haven't been doing &quot;hard things&quot; at my job for... hell, over a year now? And it's been grating on me to the point where, now, my soul cannot take it anymore?</p>
<p>And now Chance has it to put phrases like &quot;you can do hard things&quot; and &quot;put yourself on the steepest learning curve&quot; into my head this weekend and now I have too many things on my mind and I have to reconsider my entire work situation.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #5: Going dynamic</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-05-going-dynamic/</link>
      <pubDate>Sun, 04 Aug 2024 14:15:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-05-going-dynamic/</guid>
      <content:encoded><![CDATA[<p>Hello! I am now, for the first time, writing this at a desktop computer. I'm kind of uncomfortable with how quickly I am able to write (I tend to stumble mentally when my typing catches up to my thinking), but this should make the development process a lot smoother.</p>
<p>Today we're going to have some fun. We're going to make our page content dynamic, based on the page URL.</p>
<p>To do that, we have to commit to an approach for rendering dynamic HTML.</p>
<hr>
<p>I'm a professional web developer. As is the way of things, of modern web development, I've only ever really worked with JavaScript frameworks. My experience with authoring dynamic web pages is mainly by using Vue. Building this project as a Vue app would be familiar and easy to me.</p>
<p>Here's the rub: I don't want to use a JavaScript framework for this project.</p>
<p>There's a mix of reasons for this, some more frivolous than others. If I'm being honest, the core reason is a certain sense of <em>craft snobbishness</em>. I like to author lean web pages that are fast to transfer, fast to parse, fast to run. Wherever possible, I like to build things myself using the features of the platform, instead of introducing dependencies like frameworks and libraries. I like to keep the total technology stack simple, shallow, shelf-stable.</p>
<p>I know, rationally, that it won't make a difference to user experience if I author this using a performant framework like Svelte or Solid. It would probably be less code to write, in total. I might get things done quicker. Be more productive.</p>
<p>But I don't wanna. I don't even wanna install any npm packages. I wanna try doing this all with vanilla JavaScript. Call it a learning experience, because I've never rendered dynamic UI in vanilla JavaScript before. But by God I am going to stumble my way through this and drag you with me.</p>
<hr>
<p>I did a little bit of research to see what approaches exist for changing the DOM with JavaScript. Of the ones I found, one stood out as being the least fuss to get started with: <code>innerHTML</code>.</p>
<p>Here's what we do: Add a little script to the bottom of our document...</p>
<pre><code class="language-html">&lt;script&gt;

&lt;/script&gt;
</code></pre>
<p>...and set <code>document.body.innerHTML</code>.</p>
<pre><code class="language-html">&lt;script&gt;
    document.body.innerHTML = &quot;&lt;h1&gt;Hello World&lt;/h1&gt;&quot;;
&lt;/script&gt;
</code></pre>
<p>Now our page says &quot;Hello World&quot;! We've successfully changed the page content with JavaScript, in one line of fairly uncomplicated code. Sadly, this also replaces all the HTML we've written up to this point, but we're about to fix that.</p>
<p>Bear with me. The next step may not be for the faint of heart.</p>
<pre><code class="language-html">&lt;body&gt;
    &lt;!-- Cut... --&gt;
&lt;/body&gt;
&lt;script&gt;
    // ...and paste.
    document.body.innerHTML = `
        &lt;h1&gt;Slay the Spire solver&lt;/h1&gt;
        &lt;h2&gt;Player: Ironclad&lt;/h2&gt;
        &lt;p&gt;HP: 80/80&lt;/p&gt;
        &lt;p&gt;Energy: 3/3&lt;/p&gt;
        &lt;details open&gt;
            &lt;summary&gt;Hand (5)&lt;/summary&gt;
            &lt;ul&gt;
                &lt;li&gt;Bash&lt;/li&gt;
                &lt;li&gt;Defend&lt;/li&gt;
                &lt;li&gt;Defend&lt;/li&gt;
                &lt;li&gt;Defend&lt;/li&gt;
                &lt;li&gt;Strike&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/details&gt;
        &lt;details&gt;
            &lt;summary&gt;Draw pile (5)&lt;/summary&gt;
            &lt;ul&gt;
                &lt;li&gt;Defend&lt;/li&gt;
                &lt;li&gt;Strike&lt;/li&gt;
                &lt;li&gt;Strike&lt;/li&gt;
                &lt;li&gt;Strike&lt;/li&gt;
                &lt;li&gt;Strike&lt;/li&gt;
            &lt;/ul&gt;     
        &lt;/details&gt;
        &lt;details&gt;
            &lt;summary&gt;Discard pile (0)&lt;/summary&gt;
        &lt;/details&gt;
        &lt;details&gt;
            &lt;summary&gt;Relics (1)&lt;/summary&gt;
            &lt;ul&gt;
                &lt;li&gt;Burning Blood &lt;i&gt;(At the end of combat, heal 6 HP)&lt;/i&gt;&lt;/li&gt;
            &lt;/ul&gt;
        &lt;/details&gt;
        &lt;h2&gt;Enemies&lt;/h2&gt;
        &lt;h3&gt;Jaw Worm&lt;/h3&gt;
        &lt;p&gt;HP: 42/42&lt;/p&gt;
        &lt;p&gt;Next move: Chomp (Deal 11 damage)&lt;/p&gt;
        &lt;h2&gt;Actions&lt;/h2&gt;
        &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Bash on Jaw Worm&lt;/a&gt;&lt;/h3&gt;
        &lt;ul&gt;
            &lt;li&gt;Player: -2 Energy&lt;/li&gt;
            &lt;li&gt;Hand: -1 Bash&lt;/li&gt;
            &lt;li&gt;Discard pile: +1 Bash&lt;/li&gt;
            &lt;li&gt;Jaw Worm: -8 HP, +2 Vulnerable&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Strike on Jaw Worm&lt;/a&gt;&lt;/h3&gt;
        &lt;ul&gt;
            &lt;li&gt;Player: -1 Energy&lt;/li&gt;
            &lt;li&gt;Hand: -1 Strike&lt;/li&gt;
            &lt;li&gt;Discard pile: +1 Strike&lt;/li&gt;
            &lt;li&gt;Jaw Worm: -6 HP&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Defend&lt;/a&gt;&lt;/h3&gt;
        &lt;ul&gt;
            &lt;li&gt;Player: -1 Energy, +5 Armor&lt;/li&gt;
            &lt;li&gt;Hand: -1 Defend&lt;/li&gt;
            &lt;li&gt;Discard pile: +1 Defend&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h3&gt;End turn&lt;/h3&gt;
        &lt;ul&gt;
            &lt;li&gt;Player: -11 HP&lt;/li&gt;
            &lt;li&gt;Hand: -1 Bash, -2 Defend, +3 Strike&lt;/li&gt;
            &lt;li&gt;Draw pile: -4 Strike, -1 Defend&lt;/li&gt;
            &lt;li&gt;Discard pile: +1 Bash, +3 Defend, +1 Strike&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 1 (60% chance)&lt;/a&gt;&lt;/h4&gt;
        &lt;ul&gt;
            &lt;li&gt;Jaw Worm: next move Bellow (gain 3 Strength and 6 Block)&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 2 (40% chance)&lt;/a&gt;&lt;/h4&gt;
        &lt;ul&gt;
            &lt;li&gt;Jaw Worm: next move Thrash (deal 7 damage, gain 5 Block)&lt;/li&gt;
        &lt;/ul&gt;
    `;
&lt;/script&gt;
</code></pre>
<p>Now - as long as you have JavaScript enabled - the page looks just like before. We've committed a slight crime against HTML by turning it into a JavaScript string, but hey, we're still authoring HTML, just uh, not in the actual HTML itself.</p>
<p>Oh, we should leave a note for visitors with JavaScript disabled...</p>
<pre><code class="language-html">&lt;body&gt;
    &lt;noscript&gt;
        This application only works with JavaScript enabled.
    &lt;/noscript&gt;
&lt;/body&gt;
</code></pre>
<p>Testing it by disabling JavaScript in the browser devtools. Yeah, it works.</p>
<p>Now what was the point of this crime? Well, now we can do this:</p>
<pre><code class="language-html">&lt;script&gt;
    let queryString = window.location.search;
    document.body.innerHTML = `
        &lt;h1&gt;Slay the Spire solver&lt;/h1&gt;
        &lt;p&gt;Query string: ${queryString}&lt;/p&gt;
        ...
    `;
&lt;/script&gt;
</code></pre>
<p>Opening <code>index.html</code>, and the new paragraph just says &quot;Query string&quot;. But if we open <code>index.html?hello=world</code>, we get &quot;Query string: ?hello=world&quot;! <strong>We can now use the query string to change page contents!</strong></p>
<p>Okay okay let's roll back that example and do something useful with this. Let's try setting the player HP using <code>?hp=80</code>.</p>
<pre><code class="language-js">let queryParams = new URLSearchParams(window.location.search);
let hp = queryParams.get('hp');
document.body.innerHTML = `
    ...
    &lt;p&gt;HP: ${hp}/80&lt;/p&gt;
    ...
`;
</code></pre>
<p>Visiting <code>index.html?hp=80</code>, it works! Oh, but visiting <code>index.html</code> it now says &quot;HP: null/80&quot;. We had better fall back to a default value when it's not set.</p>
<pre><code class="language-js">let hp = queryParams.get('hp') ?? 80;
</code></pre>
<p>There, back to normal. We can do the same for energy:</p>
<pre><code class="language-js">let energy = queryParams.get('energy') ?? 3;
// ...
&lt;p&gt;Energy: ${energy}/3&lt;/p&gt;
</code></pre>
<p>For cards in hand it's not as straightforward because it's a list. We could do <code>?hand=Bash,Defend,Defend,Defend,Strike</code>, and generate the list like this:</p>
<pre><code class="language-js">let hand = queryParams.get('hand')?.split(',') ?? ['Bash', 'Defend', 'Defend', 'Defend', 'Strike'];
// ...
&lt;details open&gt;
    &lt;summary&gt;Hand (${hand.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${hand.map(card =&gt;
            `&lt;li&gt;${card}&lt;/li&gt;`
        ).join('')}
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>Same for discard pile and draw pile!</p>
<pre><code class="language-js">let drawPile = queryParams.get('draw')?.split(',') ?? ['Defend', 'Strike', 'Strike', 'Strike', 'Strike'];
let discardPile = queryParams.get('discard')?.split(',') ?? [];
// ...
&lt;details&gt;
    &lt;summary&gt;Draw pile (${drawPile.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${drawPile.map(card =&gt;
            `&lt;li&gt;${card}&lt;/li&gt;`
        ).join('')}
    &lt;/ul&gt;
&lt;/details&gt;
&lt;details&gt;
    &lt;summary&gt;Discard pile (${discardPile.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${discardPile.map(card =&gt;
            `&lt;li&gt;${card}&lt;/li&gt;`
        ).join('')}
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>And for completeness, though we won't change them our scenario, let's set maximum HP, maximum energy, and relics.</p>
<pre><code class="language-js">let maxHp = queryParams.get('maxhp') ?? 80;
let maxEnergy = queryParams.get('maxenergy') ?? 3;
let relics = queryParams.get('relics')?.split(',') ?? ['Burning Blood'];
// ...
&lt;p&gt;HP: ${hp}/${maxHp}&lt;/p&gt;
&lt;p&gt;Energy: ${energy}/${maxEnergy}&lt;/p&gt;
// ...
&lt;details&gt;
    &lt;summary&gt;Relics (${relics.length})&lt;/summary&gt;
    &lt;ul&gt;
        ${relics.map(relic =&gt;
            `&lt;li&gt;${relic}&lt;/li&gt;`
        ).join('')}
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>Sweet. All the player data can be controlled by query string now. Oh, but we lost one thing in the process: the description for Burning Blood. I think we could write relic descriptions in an object, and look it up from there:</p>
<pre><code class="language-js">let relicDescriptions = { 'Burning Blood': 'At the end of combat, heal 6 HP' };
// ...
`&lt;li&gt;${relic} &lt;i&gt;(${relicDescriptions[relic]})&lt;/i&gt;&lt;/li&gt;`
</code></pre>
<p>Yeah, works fine!</p>
<p>Next up would be enemy state, but I'm running out of time and energy for the day, and it looks tricky enough that I want to make it its own session. Before we wrap, let's make our links do something. We can't set all of the state yet, so we will just set the parts we are able to:</p>
<pre><code class="language-html">&lt;h3&gt;
    &lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;energy=1&amp;hand=Defend,Defend,Defend,Strike&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Bash&quot;&gt;
        Play Bash on Jaw Worm
    &lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
    &lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;energy=2&amp;hand=Bash,Defend,Defend,Defend&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Strike&quot;&gt;
        Play Strike on Jaw Worm
    &lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
    &lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=80&amp;energy=2&amp;hand=Bash,Defend,Defend,Strike&amp;draw=Defend,Strike,Strike,Strike,Strike&amp;discard=Defend&quot;&gt;
        Play Defend
    &lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
    &lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=69&amp;energy=3&amp;hand=Defend,Strike,Strike,Strike,Strike&amp;draw=&amp;discard=Bash,Defend,Defend,Defend,Strike&quot;&gt;
        End turn 1 (60% chance)
    &lt;/a&gt;
&lt;/h4&gt;
&lt;h4&gt;
    &lt;a href=&quot;?maxhp=80&amp;maxenergy=3&amp;relics=Burning%20Blood&amp;hp=69&amp;energy=3&amp;hand=Defend,Strike,Strike,Strike,Strike&amp;draw=&amp;discard=Bash,Defend,Defend,Defend,Strike&quot;&gt;
        End turn 2 (40% chance)
    &lt;/a&gt;
&lt;/h4&gt;
</code></pre>
<p>Now we have it! We have links to different game states! 🎉</p>
<p>There's just a few things left to fix before the scenario is fully-functioning, for some strained definition of &quot;just a few&quot;:</p>
<ol>
<li>Controlling enemy state via query string</li>
<li>Adding player armor</li>
<li>Adding enemy armor and debuffs</li>
<li>Generating valid actions based on the current state</li>
</ol>
<p>The first item will probably be one session of work, and the second and third another session. The fourth might take a little bit longer. Probably longer than all the work to that point put together.</p>
<p>Caveats before closing:</p>
<ul>
<li><code>innerHTML</code> is very simple and fun to work with. Setting it is also a <strong>security risk</strong> in case of malicious user input. Here, we're interpolating query parameters directly into the HTML, so it's trivial to craft URLs that add <em>anything</em> to the document. It's not ideal, but I'm choosing to accept this risk for now.</li>
<li>This simple scheme of using query parameters for each part of the state takes a lot of characters, and complex game states may need thousands of characters in the query string. Down the line, we'll want to encode this data in a more compact way.</li>
</ul>
<p>Mmh. Tired now. Write more later.</p>
<hr>
<p><em><a href="/crystal-spire/v5/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/f6b46cd46502af1e872869ac2c8f6de71cfaa657/index.html">Last commit: &quot;#5: Going dynamic&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #4: Links are real, and strong, and they are my friend</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-04-links-are-real/</link>
      <pubDate>Sat, 03 Aug 2024 19:26:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-04-links-are-real/</guid>
      <content:encoded><![CDATA[<p>The thing about doing a project as daily writing-and-coding sessions is you get a lot of time inbetween sessions to mull things over. Two things have been stuck in my mind since last time:</p>
<ol>
<li>My unease with the navigation issue, overriding and re-implementing link behavior.</li>
<li>How to dynamically render the HTML based on game state.</li>
</ol>
<p>I have a good idea for that second issue now, but I just returned from holiday, and lack the time and energy to finish it today. Ideally, I'd like to get a bit of coding done in each post I do, but if I leave this post in the pipes for a third day in a row, I'm going to feel constipated.</p>
<p>Today, we're only talking navigation.</p>
<hr>
<p>To recap the navigation issue: I concluded that we want to navigate between game states, as if they were pages, and that links are the most appropriate UI control for that. I also concluded that <em>we will have too much state to keep all the data in URLs</em>, meaning we have to override normal link behavior and re-implement it all to work with our application state.</p>
<p>I was aware, at the time, that it would be messy and difficult to do right. Having sat with it for a day, it now looks <em>even worse</em> in my mind.</p>
<p>When pages have state stored outside the URL, and links modify that state instead of navigating to a URL, here are all the affordances I can think of that we lose:</p>
<ul>
<li>Page history</li>
<li>Navigating to the next/previous page</li>
<li>Opening links in a new tab</li>
<li>Reloading pages without losing data</li>
<li>Browser bookmarks</li>
<li>Sharing page links with others</li>
</ul>
<p>Some of those items sound like a pain to re-implement to the standard of normal links. The rest of them sound <em>impossible</em> to re-implement to the same standard.</p>
<p>These affordances are <em>useful</em> and <em>expected</em>. Messing them up would make our app <em>kind of crap</em>. I don't want to make this project kind of crap, I want to make it <em>nice</em>. Messing with link behavior would make a mess that we cannot clean up.</p>
<p>However. I was struck with an idea. I think it <em>is</em> possible to fit all the necessary page state in less than a couple thousand characters. And if we accomplish that, the constraint that pushed us down this dark path in the first place is gone.</p>
<p>In other words:</p>
<p><strong>Plain links are back on menu!</strong></p>
<hr>
<p><em><a href="/crystal-spire/v3/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/12d6098e07ecd5de448b3d76e96805c9496145bb/index.html">Last commit: &quot;#3: Introducing links&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #3: Introducing links</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-03-introducing-links/</link>
      <pubDate>Thu, 01 Aug 2024 10:40:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-03-introducing-links/</guid>
      <content:encoded><![CDATA[<p>So I've been thinking.</p>
<p>Last time, I said we were aiming to explore the branching paths a game of Slay the Spire can take. A key feature - maybe <em>the</em> key feature - would be to view the resulting state of an action's outcome. And I think that means selecting an outcome, then having that outcome's state displayed on the screen, with all of its actions and all of their outcomes. And then you should be able to view a <em>next</em> outcome a level deeper, and again, and you should be able to move back to a previous one you have viewed.</p>
<p>This app needs to let you <strong>navigate between states.</strong></p>
<p>That means links. With custom behavior. And messing with the browser history so back/forward buttons work as expected.</p>
<p>I mean, <em>maybe</em> we can avoid that? Maybe the links can have query strings defining the complete next state? But no, no, the page should show you the path from the initial state, dozens and dozens of actions deep, with links to jump back to them. We can't fit all of that data into a query string, because I'm pretty sure browsers won't guarantee what happens when URLs exceed 2048 characters. And there's all kinds of other persistent state we may want.</p>
<p>I think there's no way around it.</p>
<p>Boy, what a can of worms we have in store for us.</p>
<hr>
<p>Thankfully, to sketch out the HTML, we can leave that can of worms on the table, unopened. That's all implementation details, and we're not implementing anything yet.</p>
<p>So. Every outcome wants a link. Every link wants text that describes the page it leads to. The outcome headings are precisely that. Let's reuse them.</p>
<pre><code class="language-html">&lt;h3&gt;&lt;a href=&quot;&quot;&gt;Play Bash on Jaw Worm&lt;/a&gt;&lt;/h3&gt;
</code></pre>
<p>Yeah, visually, that looks good to me. I'm unsure about the <code>href</code> value - I know that <code>href=&quot;#&quot;</code> is safe for links that shouldn't take you off the current page, but <code>href=&quot;&quot;</code> seems to have the same effect. Let me look up what the difference is.</p>
<p>Huh. Hard to test on my phone, but some people say that <code>href=&quot;&quot;</code> actually reloads the page, while <code>href=&quot;#&quot;</code> jumps to the top of the page? The latter seems like less trouble. If it's the wrong approach, it should be easy to fix later.</p>
<pre><code class="language-html">&lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Bash on Jaw Worm&lt;/a&gt;&lt;/h3&gt;
</code></pre>
<p>Now for Strike:</p>
<pre><code class="language-html">&lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Strike on Jaw Worm&lt;/a&gt;&lt;/h3&gt;
</code></pre>
<p>And Defend:</p>
<pre><code class="language-html">&lt;h3&gt;&lt;a href=&quot;#&quot;&gt;Play Defend&lt;/a&gt;&lt;/h3&gt;
</code></pre>
<p>And end turn... uh oh:</p>
<pre><code class="language-html">&lt;h3&gt;End turn&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -11 HP&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash, -2 Defend, +3 Strike&lt;/li&gt;
    &lt;li&gt;Draw pile: -4 Strike, -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash, +3 Defend, +1 Strike&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;60%&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Jaw Worm: next move Bellow (gain 3 Strength and 6 Block)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;40%&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Jaw Worm: next move Thrash (deal 7 damage, gain 5 Block)&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>I mean. It <em>works</em>. But &quot;60%&quot; and &quot;40%&quot; seem like terrible link texts, especially when we get more outcomes on the page with the same probabilities. I want link texts, taken out of context of where they are on the page, to give a decent idea of what they lead to, and to be unique.</p>
<p>Maybe if we expand the headings, swallow the cost of duplicating some text, it would be better.</p>
<pre><code class="language-html">&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn (60%)&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn (40%)&lt;/a&gt;&lt;/h4&gt;
</code></pre>
<p>Yeah. Better. And actually makes the page more readable to me. Still, the links won't be unique in the cases where they have the same probability.</p>
<p>Could we, uh, number them?</p>
<pre><code class="language-html">&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 1 (60%)&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 2 (40%)&lt;/a&gt;&lt;/h4&gt;
</code></pre>
<p>Looks... kind of weird, but I don't have a better idea for making them unique. Now we have two unexplained numbers right next to each other. It reads confusing to me, the meaning of the percentage looks <em>more</em> ambiguous now.</p>
<p>Would adding more text help us, again?</p>
<pre><code class="language-html">&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 1 (60% chance)&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href=&quot;#&quot;&gt;End turn 2 (40% chance)&lt;/a&gt;&lt;/h4&gt;
</code></pre>
<p>It's all subjective, so I don't know if other people finds this clearer, but this is my favorite so far. I'm happy to proceed with this.</p>
<p>Nice! The headings look better, and we now have links that promise us that we can explore all the ways the game can go. I like the look of this!</p>
<p>We actually have enough HTML sketched up now that we could stop it here and start working on implementing the logic, making this skeleton come alive. I think that's the right thing to do. Sketching up more features at this point would help surface design issues we will run into, but I trust our ability to solve them later better than our ability to prepare for them now.</p>
<hr>
<p>A lovely thing about these blog posts, these dev logs, is that it forces me to put each and every little thing I do into words. It forces me to justify my decisions. As a result, my development so far has been more deliberative, more steady and well-reasoned, than anything I can remember developing in private. I am very happy with every little step we've made along the way, even if - or maybe <em>because</em> - it's very small pieces of work, all in all.</p>
<p>These posts also crystallize my train of thought in a way where it's easy for me to pick up where I left off. If - sorry, <em>when</em> - I stop working on this project for a while, I have enough context made permanent on these pages that I should be able to pick it up exactly where I left off, even if it has been years.</p>
<p>I wonder if I'll have to put that theory to the test someday. Oh well.</p>
<p>Next time, let's write some JavaScript. Let's make things <em>change</em>.</p>
<hr>
<p><em><a href="/crystal-spire/v3/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/12d6098e07ecd5de448b3d76e96805c9496145bb/index.html">Last commit: &quot;#3: Introducing links&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #2: Actions and consequences</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-02-actions-and-consequences/</link>
      <pubDate>Wed, 31 Jul 2024 14:10:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-02-actions-and-consequences/</guid>
      <content:encoded><![CDATA[<p>This seems like a good time as any to start talking about what I want out of this project. In-between writing, I've had some time to mull it over.</p>
<p>I want to create a &quot;solver&quot; for Slay the Spire which functions as a <strong>highly interactive analytical tool</strong>. I am imagining it showing the possible actions you can take in any situation, their possible outcomes and their probabilities, and then letting you select an outcome to view and analyze further. I want a tree of past and future game states to move through. I want a search algorithm for optimal actions that is <strong>explainable, auditable, and tunable</strong>. I want to be able to <strong>query</strong> for specific outcomes like &quot;highest possible health remaining&quot; and &quot;highest guaranteed health remaining&quot; and &quot;least turns taken.&quot;</p>
<p>So, what I want is less a &quot;solver,&quot; something that spits out the solution for you to follow, makes you a passive user, and more a tool that invites you to be an active participant in the analytical process.</p>
<p>I think that's a neat vision to work towards.</p>
<hr>
<p>Today I want to sketch some more HTML and get some essential features in place. Particularly:</p>
<ul>
<li>Every possible action you can take in a game state</li>
<li>Every possible outcome from a given action</li>
</ul>
<p>Slay the Spire is a card game with a lot of inherent randomness in card draw order, as well as many random card effects, and some randomness in enemy moves. At any time in the game, you likely have many different cards you can play, and you can always end the turn. The game can branch in many different directions depending on the actions you choose, and branches yet again in the random outcomes actions have.</p>
<p>These branching paths are what we are here to explore. We need to display them.</p>
<p>For the opening scenario we've sketched, there are four possible actions we can take:</p>
<ul>
<li>Play Bash on Jaw Worm</li>
<li>Play Strike on Jaw Worm</li>
<li>Play Defend</li>
<li>End the turn</li>
</ul>
<p>One action at a time. Bash is an <em>attack</em> card that costs 2 energy to play, and reads: <em>&quot;Deal 8 damage. Apply 2 Vulnerable.&quot;</em> The result of playing it is:</p>
<ul>
<li>We go from 3 energy (our starting amount) to 1 energy.</li>
<li>Bash moves from the hand to the discard pile.</li>
<li>Jaw Worm goes from 42 to 34 HP.</li>
<li>Jaw Worm gets 2 turns of the <em>Vulnerable</em> debuff, which causes it to take 50% more damage from attacks.</li>
</ul>
<p>I realize now I forgot to add energy to the page last time. Better fix that first.</p>
<pre><code class="language-html">&lt;h2&gt;Player: Ironclad&lt;/h2&gt;
&lt;p&gt;HP: 80/80&lt;/p&gt;
&lt;p&gt;Energy: 3/3&lt;/p&gt;
</code></pre>
<p>Now. How do we present the action of playing Bash? I suspect this will be first hard and nuanced problem to solve. Let's be naive and continue to use headings for our first draft (and if we're lucky, the naive solution will be good enough):</p>
<pre><code class="language-html">&lt;h2&gt;Actions&lt;/h2&gt;
&lt;h3&gt;Play Bash on Jaw Worm&lt;/h3&gt;
</code></pre>
<p>Now the outcome, which is guaranteed:</p>
<pre><code class="language-html">&lt;h3&gt;Play Bash on Jaw Worm&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Energy: -2&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash&lt;/li&gt;
    &lt;li&gt;Jaw Worm: -8 HP, +2 Vulnerable&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>I am terribly, terribly unsure about how to present the outcomes of actions.</p>
<p>We could present them as the complete resulting game state, but that would take a lot of space and make it difficult to see what has changed. So presenting the change seems better.</p>
<p>We could present the change in a number of different ways. We could do &quot;Energy: -2&quot; or &quot;-2 Energy&quot; or &quot;3 → 1 Energy&quot; or &quot;Energy: 1/3.&quot; We could do &quot;Hand: -1 Bash&quot; or &quot;Hand: -Bash&quot; or &quot;Hand: Defend, Defend, Defend, Strike&quot; or &quot;Bash: Hand → Discard.&quot; Enemy damage has yet more possibilities: &quot;Jaw Worm: -8 HP&quot; or Jaw Worm: 34/42 HP&quot; or &quot;Jaw Worm: -8 (34) HP&quot; or Jaw Worm: 42 → 34 HP.&quot; And so on and so on.</p>
<p>How in the world are we to pick a single way to present this? Well, I have some preferences:</p>
<ul>
<li>It should be concise. Some actions will have many possible outcomes and many effects per outcome, so we may have to fit dozens of outcomes and hundreds of effects on the page. This data should be as digestible and comparable as possible.</li>
<li>I was going to write a speculative preference about sets of changes being easy to combine and &quot;do addition on,&quot; as I'm curious about modeling the data that way, but it sounded less and less important as I tried to write it. Discarding this idea for now.</li>
</ul>
<p>Let's aim for concise, digestible, and comparable, then. And for that, the first idea I sketched seems... fine. Good enough to sketch some more.</p>
<p>Two more card actions. Playing <em>Strike</em> costs 1 energy and deals 6 damage.</p>
<pre><code class="language-html">&lt;h3&gt;Play Strike on Jaw Worm&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Energy: -1&lt;/li&gt;
    &lt;li&gt;Hand: -1 Strike&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Strike&lt;/li&gt;
    &lt;li&gt;Jaw Worm: -6 HP&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p><em>Defend</em> is a <em>skill</em> card that costs 1 energy and reads &quot;Gain 5 Block.&quot; <em>Block</em> prevents the next X damage you would take this turn.</p>
<pre><code class="language-html">&lt;h3&gt;Play Defend&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Energy: -1&lt;/li&gt;
    &lt;li&gt;Armor: +5&lt;/li&gt;
    &lt;li&gt;Hand: -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Defend&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Hmm. What if we combined Energy and Armor to one line affecting the player?</p>
<pre><code class="language-html">&lt;h3&gt;Play Defend&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -1 Energy, +5 Armor&lt;/li&gt;
    &lt;li&gt;Hand: -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Defend&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>I kind of like that, &quot;-1 Energy&quot; reads nicer than &quot;Energy: -1.&quot; We could make them separate list items instead of bundling them, but enemies can also gain and lose armor, so I like the clarity of writing &quot;Player&quot; and &quot;Jaw Worm&quot; in front of changes to HP, armor, buffs and debuffs.</p>
<p>Let's change the other two actions to match.</p>
<pre><code class="language-html">&lt;h3&gt;Play Bash on Jaw Worm&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -2 Energy&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash&lt;/li&gt;
    &lt;li&gt;Jaw Worm: -8 HP, +2 Vulnerable&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Play Strike on Jaw Worm&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -1 Energy&lt;/li&gt;
    &lt;li&gt;Hand: -1 Strike&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Strike&lt;/li&gt;
    &lt;li&gt;Jaw Worm: -6 HP&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Looks good!</p>
<p>Okay, now for the big one: &quot;End turn.&quot; This causes a few things to happen:</p>
<ul>
<li>We discard our hand to the discard pile.</li>
<li>The enemy makes their move, hitting us for 11 damage.</li>
<li>We draw five cards from the draw pile.
<ul>
<li>We have precisely five cards in the draw pile, so we know which cards we will draw.</li>
</ul>
</li>
<li>We refresh our energy, setting it back to 3.</li>
<li>The enemy picks a new next move.
<ul>
<li><strong>This is random.</strong> After using Chomp, the Jaw Worm has:
<ul>
<li>45% chance of using Bellow (gain 3 Strength and 6 Block)</li>
<li>30% chance of using Thrash (deal 7 damage, gain 5 Block)</li>
<li><em>Normally</em> 25% chance of using Chomp again (deal 11 damage), but it cannot use Chomp twice in a row. The wiki isn't clear on this, but I assume this means that Bellow and Thrash become proportionally more likely, to 60% chance and 40% chance, respectively.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>This means that ending the turn has two possible outcomes we need to present! How?</p>
<p>Well, headings seem to have been serving us well, so I see no reason to stop now.</p>
<pre><code class="language-html">&lt;h3&gt;End turn&lt;/h3&gt;
&lt;h4&gt;60%&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -11 HP&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash, -2 Defend, +3 Strike&lt;/li&gt;
    &lt;li&gt;Draw pile: -4 Strike, -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash, +3 Defend, +1 Strike&lt;/li&gt;
    &lt;li&gt;Jaw Worm: next move Bellow (gain 3 Strength and 6 Block)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;40%&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -11 HP&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash, -2 Defend, +3 Strike&lt;/li&gt;
    &lt;li&gt;Draw pile: -4 Strike, -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash, +3 Defend, +1 Strike&lt;/li&gt;
    &lt;li&gt;Jaw Worm: next move Thrash (deal 7 damage, gain 5 Block)&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>You know, this kind of works? It could be a lot more overwhelming. (It will become more overwhelming as we add more cards.)</p>
<p>Most details of the two outcomes are identical, guaranteed. What if we move the guaranteed bits to right after &quot;End turn,&quot; before the probabilities? Would that be better?</p>
<pre><code class="language-html">&lt;h3&gt;End turn&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Player: -11 HP&lt;/li&gt;
    &lt;li&gt;Hand: -1 Bash, -2 Defend, +3 Strike&lt;/li&gt;
    &lt;li&gt;Draw pile: -4 Strike, -1 Defend&lt;/li&gt;
    &lt;li&gt;Discard pile: +1 Bash, +3 Defend, +1 Strike&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;60%&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Jaw Worm: next move Bellow (gain 3 Strength and 6 Block)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;40%&lt;/h4&gt;
&lt;ul&gt;
    &lt;li&gt;Jaw Worm: next move Thrash (deal 7 damage, gain 5 Block)&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<p>Cons: We've gone from two blocks of changes to three, and need to mentally combine them. Pros: There is less to read, and we can clearly separate between guaranteed effects and random effects.</p>
<p>I think the pros outweigh the cons here. The pro/con calculus might shake out differently as game states get more complicated, but I'm happy to gently commit to this structure.</p>
<p>I'm less sure about how we present large changes to the hand, draw, and discard piles. I find it kind of messy to read. Not so much that I have other ideas I want to try out right now, but enough that I think we should keep an eye on it for later.</p>
<p>The &quot;60%&quot; and &quot;40%&quot; subheadings also look a bit too similar to the action headings with our raw, default HTML style. We will probably want to nest them more visibly under their parent heading very soon.</p>
<hr>
<p>Our little HTML sketch is getting quite fleshed out now. A little less straightforward, a little less certain, and a little more deliberative than last time, but we're still making forward progress.</p>
<p>I think we need, and I can get away with, one more round of HTML sketching before we can start thinking about implementing functionality. Right now, this is purely a document, with no hint of anywhere to interact. I don't know where the buttons will go! Or links? Are we using links? And what will happen when we click them?</p>
<p>Too many questions. Need more answers.</p>
<p>If you're reading this and these problems are getting your mind going as much as mine, feel free to message me <a href="mailto:cvennevik@gmail.com">by email</a> or <a href="https://www.hachyderm.io/@cvennevik">by fedi</a>. I'm not going to chat the project away outside of my blog, but I welcome ideas and suggestions.</p>
<p>Until next time!</p>
<hr>
<p><em><a href="/crystal-spire/v2/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/2fb0c59bcc6ab0799d350b69c9859b1059b7d95d/index.html">Last commit: &quot;#2: Actions and consequences&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #1: HTML first</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-01-html-first/</link>
      <pubDate>Tue, 30 Jul 2024 20:40:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-01-html-first/</guid>
      <content:encoded><![CDATA[<p>There are few things as daunting as a blank page.</p>
<p>Right now, all my solver project has to show for itself is a little bit of preamble and a vague idea. I do not have a scaffold to work on. I do not have a plan. I do not even have any clearly defined goals.</p>
<p>Before it's too late, let's get something down on the page, so we can look at it and discuss it. Let's write some HTML, in our first file, <code>index.html</code>.</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;Page title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>My editor is kind enough to generate an empty HTML snippet for me. Let's replace the title:</p>
<pre><code class="language-html">&lt;title&gt;Slay the Spire solver&lt;/title&gt;
</code></pre>
<p>And let's add our first heading to the body:</p>
<pre><code class="language-html">&lt;h1&gt;Slay the Spire solver&lt;/h1&gt;
</code></pre>
<p>It's a thoroughly uninspiring name, and I want to find a more unique and identifiable name soon. Let's delay that until we have a bit of functionality, so we can pick a name that captures what our application actually does.</p>
<p>Opening the page, everything seems to display as expected! This is our Hello World. We now have something to start adding to.</p>
<p>At this point, I would consider making our first commit to version control. Alas: I do not have a development machine with me. I am coding this on my phone, using the first Android app I was able to find for web development. I do not have any version control set up, nor any command line available. Until I return home from my vacation, our process and tooling will stay exceedingly simple. So: no commiting anything right now.</p>
<p>Let's proceed to add something interesting. To start analyzing games and available actions and potential outcomes, I will at minimum need to display a game state. Let's start with that.</p>
<p>First, some player data:</p>
<pre><code class="language-html">&lt;h2&gt;Player: Ironclad&lt;/h2&gt;
&lt;p&gt;Health: 80/80&lt;/p&gt;
</code></pre>
<p>Already, I am forced to decide on how to present the data. I could structure this as a table, or as a list, or lists of lists, or sections, or something else entirely.</p>
<p>I've decided on using headings to separate the game state data into labeled sections for a few reasons:</p>
<ul>
<li>Headings are important for screen reader navigation.</li>
<li>Heading levels let me organize the data into a hierarchy of content.</li>
<li>Headings do not require any &quot;nesting&quot; of markup elements, compared to tables, lists, and lists of lists.</li>
</ul>
<p>For simple data like player health, I've opted to keep it to a dead simple paragraph tag. In my first sketches of this (<em>mea culpa</em>, I did try some of this out without you, before I had the space to write), I tried making it a table, or an unordered list. In the end, it all seemed like too much structure. A single-line paragraph for player health will suffice for now.</p>
<p>Now what other game state exists? There's the cards in hand, cards in draw pile, and cards in discard pile. Let's write up some example lists, for a realistic first turn:</p>
<pre><code class="language-html">&lt;h3&gt;Hand&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Bash&lt;/li&gt;
    &lt;li&gt;Defend&lt;/li&gt;
    &lt;li&gt;Defend&lt;/li&gt;
    &lt;li&gt;Defend&lt;/li&gt;
    &lt;li&gt;Strike&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Draw pile&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Defend&lt;/li&gt;
    &lt;li&gt;Strike&lt;/li&gt;
    &lt;li&gt;Strike&lt;/li&gt;
    &lt;li&gt;Strike&lt;/li&gt;
    &lt;li&gt;Strike&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Discard pile&lt;/h3&gt;
&lt;p&gt;Empty&lt;/p&gt;
</code></pre>
<p>Your hand can contain up to 10 cards, and your draw and discard piles can contain any number of cards, so these make sense as lists. Implicitly, I am structuring them as unordered sets, as order in hand does not matter and order in draw pile is typically unknown. Let's sort them alphabetically for consistency.</p>
<p>Though, that draw pile is taking up a lot of screen space for a relatively unimportant piece of information. What if we made it collapsible, in a <code>&lt;details&gt;</code> element?</p>
<pre><code class="language-html">&lt;details&gt;
    &lt;summary&gt;Draw pile&lt;/summary&gt;
    &lt;ul&gt;
        &lt;li&gt;Defend&lt;/li&gt;
        &lt;li&gt;Strike&lt;/li&gt;
        &lt;li&gt;Strike&lt;/li&gt;
        &lt;li&gt;Strike&lt;/li&gt;
        &lt;li&gt;Strike&lt;/li&gt;
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>Hmm, too little information when collapsed. Maybe if we add the card count to the summary...</p>
<pre><code class="language-html">&lt;summary&gt;Draw pile (5)&lt;/summary&gt;
</code></pre>
<p>This sits well with me. It also neatly mirrors the game UI, which only shows you the number of cards in draw pile by default.</p>
<p>Let's turn the hand and discard pile into <code>&lt;details&gt;</code> elements, too.</p>
<pre><code class="language-html">&lt;details&gt;
    &lt;summary&gt;Hand (5)&lt;/summary&gt;
    &lt;ul&gt;
        &lt;li&gt;Bash&lt;/li&gt;
        &lt;li&gt;Defend&lt;/li&gt;
        &lt;li&gt;Defend&lt;/li&gt;
        &lt;li&gt;Defend&lt;/li&gt;
        &lt;li&gt;Strike&lt;/li&gt;
    &lt;/ul&gt;
&lt;/details&gt;
&lt;!-- Draw pile --&gt;
&lt;details&gt;
    &lt;summary&gt;Discard pile (0)&lt;/summary&gt;
&lt;/details&gt;
</code></pre>
<p>Ah, but the hand should be open by default, because cards in hand are immediately relevant.</p>
<pre><code class="language-html">&lt;details open&gt;
</code></pre>
<p>That looks alright. In the future, I think I will want to add a little extra information to the cards, like energy cost, card type, effect, and such. For the &quot;sketching&quot; I'm doing now, I think it's better to skip it and add more essential things.</p>
<p>One more piece of player data: relics, which grant passive effects.The Ironclad's starting relic is <em>Burning Blood</em>, which heals 6 health at the end of every combat.</p>
<p>Ah, correction: It heals 6 <em>HP</em> at the start of every combat, according to the Slay the Spire wiki. I forgot the game uses the term &quot;HP,&quot; not &quot;health.&quot; Let's fix our display:</p>
<pre><code class="language-html">&lt;p&gt;HP: 80/80&lt;/p&gt;
</code></pre>
<p>And now, another <code>&lt;details&gt;</code> list for relics:</p>
<pre><code class="language-html">&lt;details&gt;
    &lt;summary&gt;Relics (1)&lt;/summary&gt;
    &lt;ul&gt;
        &lt;li&gt;Burning Blood (At the end of combat, heal 6 HP)&lt;/li&gt;
    &lt;/ul&gt;
&lt;/details&gt;
</code></pre>
<p>You know, I think the description would work well in italics. And though the <code>&lt;i&gt;</code> tag doesn't mean &quot;italic&quot; anymore, based on <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i#usage_notes">MDN's usage notes</a>, I think I can swing it as semantically valid.</p>
<pre><code class="language-html">&lt;li&gt;Burning Blood &lt;i&gt;(At the end of combat, heal 6 HP)&lt;/i&gt;&lt;/li&gt;
</code></pre>
<p>I think that's every bit of player information. It's enough for our UI to start taking shape, at least.</p>
<p>Let's add the second half of the game state: the enemy. I want to start with the <em>Jaw Worm</em>, one of the three enemies you can encounter on the first floor.</p>
<pre><code class="language-html">&lt;h2&gt;Enemies&lt;/h2&gt;
&lt;h3&gt;Jaw Worm&lt;/h3&gt;
&lt;p&gt;HP: 42/42&lt;/p&gt;
</code></pre>
<p>We nest the &quot;Jaw Worm&quot; heading under an &quot;Enemies&quot; heading, since encounters can have more than one enemy.</p>
<p>Other than HP, we also know our enemies' <em>intention</em>, what move they will make when we end the turn. The Jaw Worm has three possible moves, but always starts with <em>Chomp</em>.</p>
<pre><code class="language-html">&lt;p&gt;Next move: Chomp &lt;i&gt;(Deal 11 damage)&lt;/i&gt;&lt;/p&gt;
</code></pre>
<p>Huh, I don't really like the italics here. Somehow I like it for relics, but not for enemy moves. Maybe because relics are more memorable and their descriptions are longer.</p>
<pre><code class="language-html">&lt;p&gt;Next move: Chomp (Deal 11 damage)&lt;/p&gt;
</code></pre>
<p>That's better.</p>
<hr>
<p>It's growing late, so we wrap the post here.</p>
<p>So far, I am happy with how smooth the process is. We've gone from &quot;nothing&quot; to &quot;something,&quot; which is major progress. I'm much more comfortable with the default, unstyled HTML look than I expected. At some point I will want to improve the presentation for clarity and usability, but the raw look will serve us well until the document structure stabilizes.</p>
<p>I'm also very happy I started drafting the HTML first instead of diving into JavaScript and writing logic. My C# version of the solver started with game logic, and the UI never graduated beyond printing game state to the console. It's very satisfying to me that this version is already more visually interesting than my last attempt.</p>
<p>More than that, I realize that starting with the HTML is extremely helpful for clarifying what I am making. It takes all my fuzzy, loose thoughts, and puts them in concrete terms on the page. It helps me see them better. It frees up my mind to think of next steps. It lets me start planning what features I want, see where they will fit in, start seeing friction and flaws where I need to adapt the design.</p>
<p>I feel very prepared to expand on this tomorrow. Probably writing more HTML, still: actions and outcomes. Until then!</p>
<hr>
<p><em><a href="/crystal-spire/v1/">View this app version</a></em> | <em><a href="https://codeberg.org/cvennevik/crystal-spire/src/commit/13ea21e15f66564b20ea0972187ce772c4437653/index.html">Last commit: &quot;#1: HTML first&quot;</a></em></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Slay the Spire #0: Preamble</title>
      <link>https://www.cvennevik.no/blog/slay-the-spire-00-preamble/</link>
      <pubDate>Mon, 29 Jul 2024 10:05:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/slay-the-spire-00-preamble/</guid>
      <content:encoded><![CDATA[<p>I want to make a Slay the Spire solver again.</p>
<p>For the uninitiated: Slay the Spire is a video game where you fight your way through floor after floor of enemies until you face the Heart of the Spire. To get there, you have to defeat the enemies in turn-based battles by playing cards from your deck, of which there are dozens and dozens of different kinds - ones that hurt the enemy, ones that protect you, ones that power you up or weaken the enemy, and so on. At any point in a run, if you run out of health, you die and the run is over.</p>
<p>If you want to understand the game better and have a bit more context for what I'll be working with here, I suggest watching somebody playing a full run of the game - my favorite Slay the Spire streamers are <a href="http://www.youtube.com/@Baalorlord">Baalorlord</a> and <a href="http://www.youtube.com/@Jorbs">Jorbs</a>. <a href="https://youtu.be/vYkxc7eknWk">Here's a video of Baalorlord playing a run with the Ironclad that I quite like</a>.</p>
<p>If you would rather not spend time on that, but still want to see how I write a solver for the game, that’s fine too! I will have to implement each and every one of the mechanics of the game as I go, so it should be possible to follow along without too much prior knowledge.</p>
<hr>
<p>Back in 2022, I started a side project, just for fun, to write a program that would find the best possible moves to take in Slay the Spire. It was a C# project, I spent… a couple of months on it, I think? I got it to the point where it could simulate one of the first combat encounters of the game and pick reasonably good moves. It was a lot of fun to make.</p>
<p>Now, in 2024, I want to do it again, but different. I'm really interested in web development at this time, and I'm planning to write it as a single web page, using plain HTML, CSS, and lots of JavaScript.</p>
<p>Why? I want to place more emphasis on the UI and visualization, which is easier for me out-of-the-box with a web app. It is easier for people following along to check out the code themselves, play around with it, and maybe hack it a bit themselves - you only need your web browser. It's good practice for my web development job. And I get to publish it on my site.</p>
<p>There are several good reasons for me not to build it as a web app, the main one for me being that JavaScript gives poor performance for the kind of search algorithms I’ll be implementing, and performance is quickly going to become a bottleneck for the problems I'm looking to solve. I'm choosing to accept this - combinatorial explosion will cause me issues at some point no matter how much power and efficiency I throw at the problem, and I do not mind it coming to bite me slightly sooner. Learning more about JavaScript performance and optimization sounds fun, anyway!</p>
<p>Oh, and maybe the biggest reason for doing it this way: I figured out how to write HTML on my phone, so I can get this project started now, while I'm on holiday, away from my computer. 🙂</p>
<hr>
<p>I want to thank Ron Jeffries for inspiring me to write this. He’s written some lovely and entertaining series of blog posts of his own coding projects, and is currently writing a Sudoku solver (<a href="https://ronjeffries.com/articles/-x024/-z00/0/">first post here</a>). It looked fun enough that I was reminded of my old solver and wanted to do something similar myself.</p>
<p>I could get into what my goals with this are, what I am prioritizing, what I am deprioritizing, what to expect - but I'm growing tired of writing preamble. I'd rather my next bit of writing to actually get into it. We can figure all that big-picture stuff out as we go.</p>
<p>Onwards!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Having fun with SVG text</title>
      <link>https://www.cvennevik.no/blog/fun-with-svg-text/</link>
      <pubDate>Wed, 21 Feb 2024 20:15:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/fun-with-svg-text/</guid>
      <content:encoded><![CDATA[<p>Last weekend, I redesigned my blog. As part of this redesign, I wanted to make something fun for my front page. I started sketching a bit on paper, got an idea, and soon I was doing a search for &quot;css curved text&quot;.</p>
<p>The first result I found was the <a href="https://css-tricks.com/snippets/svg/curved-text-along-path/">Curved Text Along a Path tutorial</a> by Geoff Graham on CSS Tricks. It demonstrates how to add curved text to a web page using an inline SVG.</p>
<p>It was perfect.</p>
<p>About half an hour of experimenting and browsing the MDN Web Docs later, I was looking at the end result. It's the most beautiful thing I've made in years.</p>
<figure>
    <img
        src="/img/2024-02-18-front-page-screenshot.jpg"
        alt="My new front page, with links to my blog, webroll, Mastodon, and most prominently: a circular photo of a seal plush stuffed into a wine glass, with &quot;Welcome to my website&quot; written in balloon letters around the photo.">
    <figcaption>Pictured: My sweet little boy, trapped in glass.</figcaption>
</figure>
<p>Now, unless you have an above-average interest in HTML, CSS and vector graphics, you may want to tap out of this page now, because the rest of this will be me nerding out over how the sausage is made.</p>
<p>...</p>
<p>Still here?</p>
<p>Good! Let's jump in.</p>
<h2>Where we're going, we don't need Photoshop</h2>
<pre><code class="language-html">&lt;header&gt;
    &lt;svg viewBox=&quot;0 0 500 500&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;
        &lt;title&gt;Welcome to my website&lt;/title&gt;
        &lt;path id=&quot;top-curve&quot; d=&quot;M 100 100 C 100 90, 250 -40, 400 100&quot; stroke=&quot;transparent&quot; fill=&quot;transparent&quot;/&gt;
        &lt;path id=&quot;bottom-curve&quot; d=&quot;M 100 400 C 100 410, 250 540, 400 400&quot; stroke=&quot;transparent&quot; fill=&quot;transparent&quot;/&gt;
        &lt;text aria-hidden=&quot;true&quot; textLength=&quot;340&quot;&gt;
            &lt;textPath xlink:href=&quot;#top-curve&quot;&gt;Welcome to&lt;/textPath&gt;
        &lt;/text&gt;
        &lt;text aria-hidden=&quot;true&quot; textLength=&quot;340&quot;&gt;
            &lt;textPath xlink:href=&quot;#bottom-curve&quot; dominant-baseline=&quot;hanging&quot;&gt;my website&lt;/textPath&gt;
        &lt;/text&gt;
    &lt;/svg&gt;
    &lt;img src=&quot;/img/logo-500px.jpg&quot; alt=&quot;A seal in a wine glass&quot;&gt;
&lt;/header&gt;
</code></pre>
<p>This is the complete HTML for the front page header image and text. It is made up of two main elements:</p>
<ul>
<li>The <code>&lt;img&gt;</code> element, which draws the circular photo in the middle.</li>
<li>The <code>&lt;svg&gt;</code> element, which draws the text around it.</li>
</ul>
<h2>A side note on screen readers</h2>
<p>The word <em>&quot;draw&quot;</em> can be a bit misleading here, because it may lead you to believe the text is purely graphical.</p>
<figure>
    <img
        src="/img/2024-02-18-front-page-marked-text-v2.jpg"
        alt="Me selecting and highlighting part of the &quot;Welcome to&quot; text.">
    <figcaption>This brings me a silly amount of joy.</figcaption>
</figure>
<p>Yes - the SVG text functions pretty much like regular text! You can select it, copy it, and screen readers will even read it!</p>
<p><strong>That last point is a problem.</strong> When testing how the SVG reads with the built-in screen reader on Windows 11, it was... bad. It just does not read well. It may be that other screen readers handle SVG text better, but I do not want to rely on it.</p>
<p>To improve on this, I went with the most robust-looking solution I could find: I added a <code>&lt;title&gt;</code> element with equivalent text to the SVG, and hid the text elements from screen readers with <code>aria-hidden=&quot;true&quot;</code>. This made the reading experience significantly more pleasant.</p>
<p><em>(If you know of better, more accessible ways to do this, please contact me so I can update this post.)</em></p>
<h2>Styling</h2>
<p>To reliably wrap the text around the photo, I needed some reliable styling, and I needed that styling to be responsive across different screen sizes.</p>
<p>I solved this using a CSS grid where:</p>
<ul>
<li>The <code>&lt;img&gt;</code> and <code>&lt;svg&gt;</code> elements are always perfectly square.</li>
<li>They are always the same size.</li>
<li>They shrink on smaller screens.</li>
<li>They are placed directly on top of each other.</li>
</ul>
<pre><code class="language-css">.home-page header {
    display: grid;
    margin: 40px 0px;
    max-width: 500px; /* Will shrink, but keep height proportional if the screen is narrow */
}

.home-page header * {
    /* Place all child elements in the same, single cell of the grid */
    grid-column: 1;
    grid-row: 1;
    /* Ensure identical height and width */
    height: 100%;
    width: 100%;
}

.home-page header img {
    z-index: 1;
    border-radius: 100%; /* Makes the image circular */
    padding: 10%; /* Clears space for text around the image */
}

.home-page header svg {
    z-index: 2;
}
</code></pre>
<p>The image is made square by, well, being a square image. The SVG is made square by the <code>viewBox=&quot;0 0 500 500&quot;</code> property, which defines the internal dimensions of the SVG - the draw positions range from <code>(0,0)</code> to <code>(500,500)</code>.</p>
<p>And while we're in CSS world - the actual SVG text is also styled using CSS!</p>
<pre><code class="language-css">.home-page header svg text {
    fill: #89cff0;
    font-family: babycakes; /* Balloon font! https://www.fontspace.com/babycakes-font-f20531 */
    font-size: 36px;
    text-transform: uppercase;
}
</code></pre>
<h2>Text, paths, and text paths</h2>
<p>Let's look at the contents of the <code>&lt;svg&gt;</code> again, and remove <code>&lt;title&gt;</code> and <code>aria-hidden</code> for brevity.</p>
<pre><code class="language-html">&lt;path id=&quot;top-curve&quot; d=&quot;M 100 100 C 100 90, 250 -40, 400 100&quot; stroke=&quot;transparent&quot; fill=&quot;transparent&quot;/&gt;
&lt;path id=&quot;bottom-curve&quot; d=&quot;M 100 400 C 100 410, 250 540, 400 400&quot; stroke=&quot;transparent&quot; fill=&quot;transparent&quot;/&gt;
&lt;text textLength=&quot;340&quot;&gt;
    &lt;textPath xlink:href=&quot;#top-curve&quot;&gt;Welcome to&lt;/textPath&gt;
&lt;/text&gt;
&lt;text textLength=&quot;340&quot;&gt;
    &lt;textPath xlink:href=&quot;#bottom-curve&quot; dominant-baseline=&quot;hanging&quot;&gt;my website&lt;/textPath&gt;
&lt;/text&gt;
</code></pre>
<p>The <code>&lt;text&gt;</code> elements draw text. The <code>textLength</code> attributes say how many pixels long the text should be, and squishes or stretches the text to make it so. I gave both the top and bottom text elements <code>textLength=&quot;340&quot;</code> so they would stretch evenly left-to-right.</p>
<p>Inside them are the <code>&lt;textPath&gt;</code> elements, which draw text along a given path. The <code>xlink:href</code> attributes say which path they should follow. The <code>dominant-baseline=&quot;hanging&quot;</code> attribute places the bottom text <em>below</em> the path, instead of above it.</p>
<p>Finally, the transparent <code>&lt;path&gt;</code> elements supply the curves, as defined by their <code>d</code> attribute.</p>
<p>Can we talk about the curves? I <em>need</em> to talk to you about the curves.</p>
<h2>Bézier, you beautiful man</h2>
<p>Okay, so I've been in the rough vicinity of graphics and animation long enough to have heard &quot;Bézier curves&quot; referenced a few dozen times in my life. I never took the time to look up what they were. I assumed they were complicated and slightly magical, only taught in spellbooks sourced from the Graphics Wizards' tower.</p>
<p>To draw my text exactly how I wanted it, I needed Bézier curves. So I had to up look how they worked, and what all of the coordinates in the code samples meant.</p>
<p>It turns out I was bang on the money. They <em>are</em> magical.</p>
<figure>
    <img
        src="/img/bezier-quadratic.gif"
        alt="Animation of a quadratic (three control point) Bézier curve">
    <figcaption>Ah, Bézier, you've done it again!</figcaption>
</figure>
<p>I cannot hope to give a servicable tutorial for how they work - try the <a href="https://developer.mozilla.org/en-US/docs/Glossary/Bezier_curve">Bézier curve tutorial</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths">SVG Paths tutorial</a> on MDN for that.</p>
<p>In short, they consist of some number of <em>control points</em>, and move from the first control point to the final control point via the fun math-y thing the animation demonstrates. Two control points makes a linear curve (a line), three makes a quadratic curve, four makes a cubic curve, and so on.</p>
<p>This gave me just enough to go on to make a symmetric pair of cubic curves that gently curve around the image.</p>
<pre><code class="language-html">&lt;!-- Cubic curve from (100,100), via (100,90) and (250,-40), to (400,100) --&gt;
&lt;path id=&quot;top-curve&quot; d=&quot;M 100 100 C 100 90, 250 -40, 400 100&quot;/&gt;
</code></pre>
<p>Now, uh. In the middle of writing this, while reading the linked SVG Paths tutorial, I realized I could have made this using a simpler quadratic curve instead.</p>
<pre><code class="language-html">&lt;!-- Quadratic curve from (100,95), via (250,-25), to (400,94) --&gt;
&lt;path id=&quot;top-curve&quot; d=&quot;M 100 95 Q 250 -25, 400 95&quot;/&gt;
</code></pre>
<p>And. I also realized there's a non-Bézier &quot;arc&quot; curve. For drawing arcs. Like around a circle.</p>
<pre><code class="language-html">&lt;!-- Arc from (100,100), in a 210 px radius with sweep-flag enabled, to (400,100) --&gt;
&lt;path id=&quot;top-curve&quot; d=&quot;M 100 100 A 210 210 0 0 1 400 100&quot;/&gt;
</code></pre>
<p>It turns out arcs are a little bit complicated so for this use case I'm happy keeping it a Bézier curve.</p>
<p>Though... throwing a couple of arcs together <em>is</em> a simple way to draw a full circle path... so maybe...</p>
<p>I've already written up everything I learned so far, so let's close on this.</p>
<pre><code class="language-html">&lt;path id=&quot;curve&quot; d=&quot;M 100 100 A 210 210 0 0 1 400 400 A 210 210 0 0 1 100 100&quot; stroke=&quot;transparent&quot; fill=&quot;transparent&quot;/&gt;
&lt;text aria-hidden=&quot;true&quot; textLength=&quot;1320&quot;&gt;
    &lt;textPath xlink:href=&quot;#curve&quot;&gt;
        Imperial futures are only ever stolen presents.
    &lt;/textPath&gt;
&lt;/text&gt;
</code></pre>
<figure>
    <img
        src="/img/2024-02-21-imperial-futures-are-only-ever-stolen-presents.jpg"
        alt="My front page image, but now in a full circle around the photo it says &quot;Imperial futures are only ever stolen presents.&quot;">
    <figcaption>That's all, folks!</figcaption>
</figure>
]]></content:encoded>
    </item>
    
    <item>
      <title>Oops, I made code review painful</title>
      <link>https://www.cvennevik.no/blog/oops-i-made-code-review-painful/</link>
      <pubDate>Fri, 14 Apr 2023 20:15:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/oops-i-made-code-review-painful/</guid>
      <content:encoded><![CDATA[<p>A few months ago I wrote <a href="https://www.cvennevik.no/blog/code-reviews-are-overloaded/">a post</a> suggesting that you should limit your pull request reviews to their bare essentials, the &quot;bare essentials&quot; here meaning &quot;bugs and irreversible design decisions.&quot; I've had the chance to try doing this at work, and now I can share my findings with you:</p>
<p>Boy howdy, I do not enjoy this at all.</p>
<p>There is one critical issue I did not consider in my original post: whether or not the different parts of review were any enjoyable or engaging. As it turns out, by trimming out every &quot;non-essential&quot; concern from my reviews, I have trimmed away every bit of the activity that was somewhat enjoyable and engaging. My slimmed-down review process is fast, efficient, and insufferable.</p>
<p>Evaluating and discussing design choices, suggesting renames and refactorings, and taking the time to find and point out things I like - these were all things that engaged the parts of my brain that I enjoy using. It was inefficient and slow and occasionally tiring, but at the end of a review session, I was satisfied with my work.</p>
<p>Now, code reviews come in two variants: the small and easy ones that I can knock out quickly and get out of my sight, and the large and difficult ones that drain the soul out of me. 1000 line diffs used to be tough, multiple-hour review sessions where at the end I would be happy with my effort. This has been replaced with me stumbling away from the monitor trying to reawaken the parts of my brain that shut down halfway through after refusing to process any more of the code that I was jamming through my eye sockets.</p>
<p>At least there is a fun irony in all of happening because I made my reviews &quot;less demanding.&quot;</p>
<p>Now that I've subjected myself to my own suggested experiment, my feelings on pull requests reviews have cooled significantly. I do not want to do any more of these &quot;efficient&quot; reviews than I absolutely have to. Yet despite not enjoying it, I do not want to go back to the way I reviewed code before. Even if it is more bearable, it is still slow, inefficient and tiring.</p>
<p>Honestly, at this point, I just want to be subjected to as little code review possible, both as a reviewer and a author. This is something I am working on!</p>
<p>I'm a big fan of the <a href="https://martinfowler.com/articles/ship-show-ask.html">Ship / Show / Ask</a> model, which makes pull request reviews something authors explicitly opt into. To start pushing the needle away from &quot;ask for review on all changes all the time,&quot; I have asked for and received permission to merge low-risk changes without review. And if you haven't tried it before, let me tell you, being able to merge refactoring and test work straight into mainline feels so very freeing. I highly recommend it.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>A corner-cutter&#39;s confession</title>
      <link>https://www.cvennevik.no/blog/a-corner-cutters-confession/</link>
      <pubDate>Thu, 09 Feb 2023 20:45:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/a-corner-cutters-confession/</guid>
      <content:encoded><![CDATA[<p>Listen. I know I should have done this one better.</p>
<p>Yes, I didn't spend time improving the design before I went to work. I slotted my change right into the design that was already there. It fit okay! With some slight cruft, duplication, and clunky call chaining, but still! Don't look at me like that - even Kent Beck says &quot;making the change easy&quot; is the hard part, and my job is hard enough!</p>
<p>And yes, yes, I didn't write any tests first. I know it would have made my work easier, and refactoring less error-prone. And it would have helped me out in the design process. But I knew what I needed to do (mostly)! And I could just boot up the app and test it manually - it was familiar and convenient!</p>
<p>What's that? Did I write any tests after, then? Oh, no, I didn't do that either. I'd, uh, already tested all the use cases manually by the time I finished. It felt like a waste of time not to merge the work and move on. Yes, I have no cheap way of catching regressions now, I know, I know. Can we move on?</p>
<p>Because there's so much to move on to. I can't afford to feel like I'm slow. There's so many more things to do! Important things! Features! Stories! Bugs! <em>Pull requests!</em> The board is so long and the days are so short and <em>I need to do my part</em>.</p>
<p>...</p>
<p>I just... I know it's better to move slowly and deliberately. I know it's a matter of practice. And I know it relieves stress in the end.</p>
<p>But there's just so much code, so many loose threads, and so much work to do. I can only bear so much of it in my head.</p>
<p>Can you fault me for going along with the flow?</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>&#39;Technical debt&#39; is an incomplete model</title>
      <link>https://www.cvennevik.no/blog/technical-debt-is-an-incomplete-model/</link>
      <pubDate>Sun, 05 Feb 2023 10:51:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/technical-debt-is-an-incomplete-model/</guid>
      <content:encoded><![CDATA[<p>We throw around the &quot;technical debt&quot; metaphor a lot in software development. On project after project, we experience the system becoming harder to change as we work on it. Rushed design decisions come back to bite us in the butt. Progress slows to a crawl. We say we have accrued a lot of &quot;technical debt.&quot;</p>
<p>The &quot;technical debt&quot; metaphor is used to explain that we accrue <em>design flaws</em> as we work. These design flaws make it harder to change the system - the more flaws we have, the more we &quot;pay interest&quot; in increased time and effort to make new changes. To make the system easier to change again, we need to &quot;pay down the debt&quot; by fixing the design flaws. If we do not keep our &quot;technical debt&quot; in check, we risk accumulating so many design flaws that it is no longer economic to develop the system any further - we hit &quot;technical bankruptcy.&quot;</p>
<p>While this is a useful model, I've come to find it insufficient. It frames &quot;cost of change&quot; as something developers harm by introducing design flaws, and repair by removing design flaws. It is centered on the negative case.</p>
<p>The lessons I have learned about managing cost of change from the Extreme Programming community clashes with this framing, because the &quot;technical debt&quot; metaphor does not support the possibility that the cost of change can go <em>down</em> as you add changes to your system.</p>
<p>Eric Evans touches on this phenomenon through the lens of &quot;supple design&quot;:</p>
<blockquote>
<p>To have a project accelerate as development proceeds - rather than get weighed down by its own legacy - demands a design that is a pleasure to work with, inviting to change. A supple design.</p>
<p>— Eric Evans, <em>Domain-Driven Design</em>, Chapter Ten: &quot;Supple Design&quot;</p>
</blockquote>
<p>Eric compares the system design to a leather jacket that is initially stiff, but over months of use becomes comfortable and flexible in the joints. Similarly, when you keep making changes to the design as you work with the system, the parts you repeatedly need to change will become flexible and easy to change, while the rest of the design stays simple and firm.</p>
<p>Another way this phenomenon emerges is through the &quot;evolutionary design&quot; strategy. By building your design in small increments, keeping it as simple as you can, and reflecting and improving on the design with each and every change, you can manage to reduce the cost of change as you expand your system.</p>
<p>When James Shore describes this design strategy in <em>The Art of Agile Development</em>, he gives the example of a JavaScript project he did for one of his screencasts. As he added more and more features related to networking, each feature took less and less time to implement - from 12 hours, to 6 hours, to 3 hours, to under an hour - despite the later features being no less intricate than the earlier ones!</p>
<p>By improving the design with each and every change, the design does not merely stay out of our way. The design <em>actively supports and enables new changes</em>. By keeping the design clean while extending it with more functionality, we can make the system do more and more things with less effort. The codebase becomes a precious asset that accelerates our development, speeding us up instead of slowing us down.</p>
<p>These ways of reducing the cost of change are ill described as &quot;paying down technical debt.&quot; Instead, it is more accurate to say we are <strong><em>building technical wealth</em></strong>.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>I am a social animal</title>
      <link>https://www.cvennevik.no/blog/i-am-a-social-animal/</link>
      <pubDate>Sat, 04 Feb 2023 07:42:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/i-am-a-social-animal/</guid>
      <content:encoded><![CDATA[<p>I do not thrive alone at the computer. I do not thrive in peace and quiet. I do not thrive with a well-defined problem in front of me, with my headphones on, and a whole day ahead of me before I have to interact with another human.</p>
<p>I cope with it.</p>
<p>I muster the energy I have for the day. I devise elaborate techniques to focus myself. I work pomodoros. I meditate. I put on white noise. I journal. I break the work down into little digestible steps.</p>
<p>And so I manage being alone.</p>
<p>Yet sometimes, all the efforts in the world are not enough. Sometimes, I require that precious fruit: Another human's attention.</p>
<p>I carefully leave the confines of my desk, and I slink around the office to see what I can scavenge. Could there be a quick little question somewhere? A second opinion? A clarification? Oh, lucky day, a full discussion!</p>
<p>On this morsel, I return to my seat-burrow and savor my prize. My back straightens. My mind clears. I have been sated enough to function, for now, until I next need to go foraging.</p>
<p><em>How I long for the revitalizing presence of another human's company.</em></p>
<p>Some days these little morsels are not enough. Some days, I am starved.</p>
<p>My eyes glaze over the monitor. My arms are heavy. My body cannot sustain itself on table scraps of human interaction. It howls for <strong><em>collaboration</em></strong>.</p>
<p>When I get up from my seat, and look around, I see other humans. Alone at their computer. In peace and quiet. Each with their own well-defined problem in front of them, with their headphones on, with no need to talk to another human.</p>
<p>The air in the office is still. And I would do well not to disturb it.</p>
<p>I sit back down in my seat. I look at the time.</p>
<p>It is winter, yet.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Enforcing advanced type constraints with class constructors in TypeScript</title>
      <link>https://www.cvennevik.no/blog/type-constraints-with-class-constructors/</link>
      <pubDate>Fri, 20 Jan 2023 06:37:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/type-constraints-with-class-constructors/</guid>
      <content:encoded><![CDATA[<p>Frequently, when programming, I am working with data that I expect to follow a set of constraints.</p>
<ul>
<li>This parameter must be a string.</li>
<li>This return value cannot be null.</li>
<li>This object must have a username property.</li>
</ul>
<p>Constraints like these are typically common and easy to express in statically typed languages.</p>
<p>Sometimes (actually a lot of times) I am working with data that should follow stricter, more complicated constraints.</p>
<ul>
<li>This user-submitted application cannot have the <code>approvedTime</code> value set.</li>
<li>This username must be non-empty and cannot have special characters.</li>
<li>This <code>from</code> value must be before the <code>to</code> value.</li>
</ul>
<p>These constraints can be more tricky to express in a type definition, and I rarely see it attempted. Instead, I see functions either assume the data is valid, or run validation checks on the data that throw an error if it breaks a rule.</p>
<p>Following the advice of <em>&quot;parse, don't validate&quot;</em> (see <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/">the wonderful post by Alexis King</a>), I would rather that the type itself is able to enforce its own constraints. This guarantees and preserves the validity of the data as you pass it on to other functions, and reduces the risk of insufficient <em>and</em> redundant validation checks around your codebase.</p>
<p>With a few tricks, most constraints you can imagine can be enforced with a type definition. In this case, I'll be showing how to use <strong>classes</strong> to guarantee constraints on TypeScript data that simple <code>type</code> and <code>interface</code> declarations are unable to. (This technique also works in any statically typed language that supports classes.)</p>
<h2>The technique</h2>
<ol>
<li>Define a class containing the values you want to wrap.</li>
<li>In the constructor, check for any constraints you are interested in.</li>
<li>Throw an error if any of the constructor checks fail.</li>
</ol>
<p>Key to this technique being widely applicable is that <strong>you are allowed to write class wrappers for single values.</strong> You incur some overhead for having to instantiate each value as a class, and having to access the instance's value to use it, but in return you can enforce any constraint you can imagine in its constructor. Make this tradeoff at your own discretion.</p>
<p>To illustrate the technique, I've spun up a few examples showing what you can do with it.</p>
<h2>A palindrome type</h2>
<pre><code class="language-ts">class Palindrome {
    readonly value: string;

    constructor (value: string) {
        const reversedValue = value.split('').reverse().join('');
        if (value !== reversedValue) {
            throw new Error(`&quot;${value}&quot; is not a palindrome`);
        }

        this.value = value;
    }
}
</code></pre>
<p>To ensure the string is a palindrome, we reverse it and check if the reversed string is equal to the original string. If not, we throw an error. Then we save the string to the <code>value</code> field.</p>
<p>In practice, usage looks like this:</p>
<pre><code class="language-ts">const palindrome = new Palindrome('())(');
console.log(palindrome); // Output: Palindrome { value: '())(' }
console.log(palindrome.value); // Output: '())('

const invalidPalindrome = new Palindrome('(())');
// Error: &quot;(())&quot; is not a palindrome
</code></pre>
<p>The <code>Palindrome</code> class guarantees that every instance of <code>Palindrome</code> contains a string that has passed the constructor validation. If you have any functions that <em>must</em> have a palindrome, the <code>Palindrome</code> type is an effective way to enforce it.</p>
<p>If you would rather not throw an error, but check if the string is a palindrome and handle the invalid case another way, you can create a parse method that wraps the palindrome creation in a <code>try</code> block, and return <code>undefined</code> if it fails:</p>
<pre><code class="language-ts">class Palindrome {
    // ...

    static parse (value: string): Palindrome | undefined {
        try {
            return new Palindrome(value);
        } catch (error) {
            return error;
        }
    }
}

console.log(Palindrome.parse('())(')); // Output: Palindrome { value: '())(' }
console.log(Palindrome.parse('(())')); // Output: undefined
</code></pre>
<h2>A sorted array</h2>
<p>A constructor does not have to throw errors to ensure a constraint. It can also do the work to transform data to a desired form, then pin it in place.</p>
<p>For instance, you can create a <code>SortedArray</code> class that sorts your array for you:</p>
<pre><code class="language-ts">class SortedArray&lt;T&gt; {
    // Mark as ReadonlyArray to ensure contents stay sorted
    readonly contents: ReadonlyArray&lt;T&gt;;

    constructor (contents: T[]) {
        // Copy the array so we do not reorder the original array,
        // and prevent changes to the original array from affecting our sorted array
        const copy = [...contents];
        copy.sort();
        this.contents = copy;
    }
}

const sortedArray = new SortedArray([0, 5, 3, 4, 4, 2]);
console.log(sortedArray.contents); // Output: [ 0, 2, 3, 4, 4, 5 ]
</code></pre>
<p>This may be useful if you are working with algorithms that expect a sorted array, like search.</p>
<h2>A range with an estimate</h2>
<p>Classes can, of course, also enforce constraints for multiple values. While I was experimenting with a game-playing traditional AI, my search algorithm used an <code>EstimateRange</code> data type to describe the minimum, estimate, and maximum value of a given game state. To make sense, the minimum cannot be greater than the maximum, and the estimate must be between them.</p>
<p>Here is how this can be enforced in TypeScript:</p>
<pre><code class="language-ts">class EstimateRange {
    readonly minimum: number;
    readonly estimate: number;
    readonly maximum: number;

    constructor (minimum: number, estimate: number, maximum: number) {
        if (minimum &gt; maximum) {
            throw new Error(`Minimum (${minimum}) is greater than maximum (${maximum})`);
        } else if (estimate &gt; maximum) {
            throw new Error(`Estimate (${estimate}) is greater than maximum (${maximum})`);
        } else if (estimate &lt; minimum) {
            throw new Error(`Estimate (${estimate}) is less than minimum (${minimum})`);
        }

        this.minimum = minimum;
        this.estimate = estimate;
        this.maximum = maximum;
    }
}

console.log(new EstimateRange(0, 7, 10));
// Output: EstimateRange { minimum: 0, estimate: 7, maximum: 10 }

console.log(new EstimateRange(10, 7, 0));
// Error: Minimum (10) is greater than maximum (0)
</code></pre>
<p>The point I am trying to make with the variety of examples is that there is a lot you can do with classes. The constraints you can enforce are mostly limited by your imagination.</p>
<h2>A warning</h2>
<p>This trick comes with a caveat: <strong>If possible, you are better off enforcing constraints with simpler alternatives.</strong> I prefer using more concise type system features when I can. For TypeScript, you can browse the <a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html">Everyday Types</a>, <a href="https://www.typescriptlang.org/docs/handbook/2/objects.html">Object Types</a> and <a href="https://www.typescriptlang.org/docs/handbook/2/types-from-types.html">Creating Types from Types</a> pages of the TypeScript handbook for inspiration.</p>
<p>When simpler alternatives for type checks are insufficient, class constructor validation is a powerful alternative to fall back on.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Using TypeScript to prevent common mistakes</title>
      <link>https://www.cvennevik.no/blog/using-typescript-to-prevent-common-mistakes/</link>
      <pubDate>Tue, 17 Jan 2023 00:43:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/using-typescript-to-prevent-common-mistakes/</guid>
      <content:encoded><![CDATA[<p>I have been struggling to write an article about type systems for about a week now. The ideas and angles I want to take kept changing between each writing session, preventing me from ever completing a single coherent article.</p>
<p>After venting about this on Mastodon, another user asked me what I thought about static types. They were mostly experienced with dynamically typed languages, and prefer the flexibility they offer.</p>
<p>It turns out this question was all I needed to focus and get my writing back on track - you may take this blog post as my longform answer.</p>
<p>In short: I think static types are a useful tool to prevent us from making very common mistakes. Like, really common. Like &quot;half of the bugs I investigate in JavaScript applications are caused by this&quot; common.</p>
<p>Here's a few examples to illustrate the types of mistakes I'm talking about, and how adding static types with TypeScript helps prevent them.</p>
<h2>Mistake #1: Accessing undefined property names</h2>
<p>Say we are working with an object containing user profile data, and we want to send an email to that user. To do this, we access the user's email address via <code>user.emailAddress</code> and pass it to <code>sendEmail</code>.</p>
<pre><code class="language-ts">function sendEmailToUser (user) {
    sendEmail(user.emailAddress);
}
</code></pre>
<p>But what if we are mistaken? What if the <code>user</code> object's property is actually named <code>emailaddress</code>, or <code>address</code>, or <code>username</code>, or - gasp - it does not actually have a property for email address at all? Well, then this code will instead attempt to send an email to <code>undefined</code>. That's no good.</p>
<p>To check for this potential issue, let us say we found the <code>UserProfile</code> type that describes the user data we expect, and specify that <code>user</code> is of type <code>UserProfile</code>.</p>
<pre><code class="language-ts">interface UserProfile {
    // ...
    contactInfo: {
        // ...
        emailAddress: string
    }
}

function sendEmailToUser (user: UserProfile) {
    sendEmail(user.emailAddress); // Causes a build error!
}
</code></pre>
<p>Oops! It turns out the <code>user.emailAddress</code> property does not exist. Now, because we are trying to access a property that does not exist on <code>UserProfile</code>, the TypeScript compiler produces an error.</p>
<p>The <code>UserProfile</code> type instead tells us that a <code>user.contactInfo.emailAddress</code> property exists. This is likely what we actually wanted to use, and replacing <code>user.emailAddress</code> with this will make the error go away.</p>
<h2>Mistake #2: Passing invalid data</h2>
<p>Say we are working with a map, and want to place an icon at the spot where the user's mouse pointer is:</p>
<pre><code class="language-ts">function getMousePosition () {
    // ...
}

function setIconPosition (position) {
    // ...
}

function placeIconAtMousePosition () {
    const mousePosition = getMousePosition();
    setIconPosition(mousePosition);
}
</code></pre>
<p>What can go wrong here? Well, we do not know the structure of the data <code>getMousePosition</code> returns, nor what <code>setIconPosition</code> accepts. Even if we already know we are working with longitude and latitude positions in the same coordinate system, the position could be represented as a <code>{ lon, lat }</code> object, or an <code>{ x, y }</code> object, or a <code>[lon, lat]</code> array (or even a <code>[lat, lon]</code> array!).</p>
<p>Without type annotations, this code looks perfectly valid, even if the data structures may be incompatible. Now, if we add the correct types to the functions using TypeScript, the incompatibility comes to light:</p>
<pre><code class="language-ts">function getMousePosition (): { lon: number, lat: number } {
    // ...
}

function setIconPosition (position: { x: number, y: number }) {
    // ...
}

function placeIconAtMousePosition () {
    const mousePosition = getMousePosition();
    setIconPosition(mousePosition); // Causes a build error!
}
</code></pre>
<p>With the function types specified, TypeScript reports that we made a mistake passing <code>mousePosition</code> directly into <code>setIconPosition</code>. Instead, we should convert the <code>{ lon, lat }</code> object to an <code>{ x, y }</code> object.</p>
<pre><code class="language-ts">function placeIconAtMousePosition () {
    const mousePosition = getMousePosition();
    setIconPosition({
        x: mousePosition.lon,
        y: mousePosition.lat
    });
}
</code></pre>
<h2>Mistake #3: Not handling undefined values</h2>
<p>The third common mistake TypeScript can prevent is the famed <em>&quot;billion dollar mistake&quot;</em>: <s>null</s> undefined values!</p>
<p>Let's reuse the map position code example and see what happens when we modify it. Say we change the implementation of <code>getMousePosition</code> so it returns <code>undefined</code> when the mouse is outside the map. TypeScript will not permit this since this does not match the return type of <code>getMousePosition</code>, so we change the return type so it can also be <code>undefined</code>:</p>
<pre><code class="language-ts">function getMousePosition (): { lon: number, lat: number } | undefined {
    // ...
}

function setIconPosition (position) {
    // ...
}

function placeIconAtMousePosition () {
    const mousePosition = getMousePosition();
    setIconPosition({
        x: mousePosition.lon, // Causes a build error!
        y: mousePosition.lat
    });
}
</code></pre>
<p>Oh no! This change actually breaks <code>placeIconAtMousePosition</code>, because it was written with the assumption that <code>getMousePosition</code> always returns a valid position. When it instead returns <code>undefined</code>, the code will throw a runtime error when trying to access <code>mousePosition.lon</code>.</p>
<p>If we were working with untyped JavaScript, this mistake may have managed to sneak in. Luckily, TypeScript caught this error for us. It refuses to compile until we have correctly handled the case where <code>mousePosition</code> is undefined. If we add a check for it, the error disappears:</p>
<pre><code class="language-ts">function placeIconAtMousePosition() {
    const mousePosition = getMousePosition();
    if (mousePosition === undefined) return;
    setIconPosition({
        x: mousePosition.lon,
        y: mousePosition.lat
    });
}
</code></pre>
<p>I like to set up development environments so it is easy to write correct code and hard to write incorrect code. Static types are only one of several tools I use for this, but they are one of my favorites. They tell us what we can and cannot do with our data, and they are effective for catching very common mistakes. Because of this, I find the overhead of opting into static typing with TypeScript well worth it.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Code reviews are overloaded</title>
      <link>https://www.cvennevik.no/blog/code-reviews-are-overloaded/</link>
      <pubDate>Sat, 07 Jan 2023 22:55:00 GMT</pubDate>
      <guid>https://www.cvennevik.no/blog/code-reviews-are-overloaded/</guid>
      <content:encoded><![CDATA[<h2>Code reviews are effective</h2>
<p><strong>Code reviews are effective for uncovering bugs.</strong> We have multiple large studies backing this claim, estimating that the bug-detection rate of code reviews is in the ballpark of 50%. This is better evidence than we have for most software development practices. From <a href="https://en.wikipedia.org/wiki/Code_review#Efficiency_and_effectiveness_of_reviews">the Wikipedia article on code review</a>:</p>
<blockquote>
<p>Capers Jones' ongoing analysis of over 12,000 software development projects showed that the latent defect discovery rate of formal inspection is in the 60-65% range. For informal inspection, the figure is less than 50%. The latent defect discovery rate for most forms of testing is about 30%. A code review case study published in the book Best Kept Secrets of Peer Code Review found that lightweight reviews can uncover as many bugs as formal reviews, but were faster and more cost-effective in contradiction to the study done by Capers Jones.</p>
</blockquote>
<p>In addition to their primary value in discovering bugs, they can also be used to assess and improve many other aspects of the code. Design, readability, maintainability, code quality, test quality and coverage, consistency with project style guidelines and documentation are all areas where reviewers can find issues and suggest improvements. The act of reviewing and giving feedback can even help transfer knowledge between developers and be a tool for mentoring and learning.</p>
<p>On account of these benefits, code reviews have become wildly popular, and most software projects mandate that all changes must be approved by one or more reviewers. This virtually always means a <em>pull request based workflow</em>, where developers branch out from mainline, make some changes, then open a pull request that requires approval from a reviewer to merge back into mainline. At time of writing, this is the predominant way of working in our industry.</p>
<h2>Branching causes problems</h2>
<p>In projects using pull requests, the most popular strategy for branching is <em>feature branching</em>, creating a branch for a single feature and opening a pull request when the feature is complete. This is a convenient and intuitive way of organizing changes. However, these feature branches tend to be long-lived (on the order of days or weeks), and long-lived branches cause some serious issues.</p>
<p>In part four of Thierry de Pauw's article series <a href="https://thinkinglabs.io/articles/2021/04/26/on-the-evilness-of-feature-branching.html">On the Evilness of Feature Branching</a>, he goes into <a href="https://thinkinglabs.io/articles/2022/05/30/on-the-evilness-of-feature-branching-the-problems.html">the problems</a> of feature branching. The article is worth reading in full, but to summarize some of its points:</p>
<ul>
<li><strong>It delays feedback</strong> on how well changes integrate with other team members' work and how it runs in production.</li>
<li><strong>It causes rework</strong> through merge conflicts.</li>
<li><strong>It discourages refactoring</strong> as they have a high risk of causing merge conflicts.</li>
<li><strong>It introduces batch work and inventory</strong>, trapping valuable work in the system and worsening the throughput, quality, stability and lead time of changes.</li>
<li><strong>It increases risks</strong> by batching changes into large sets which are more likely to break, and harder to find the cause of when they do.</li>
</ul>
<p>Key to these issues is that they are more frequent and more severe the longer the branches live and the larger the changes are. Conversely, shorter-lived branches and smaller changes cause less issues. We can nearly eliminate the branching issues by pushing this all the way to <a href="https://martinfowler.com/articles/branching-patterns.html#continuous-integration">continuous integration</a>, where everyone's work is merged into mainline every day, potentially even multiple times an hour.</p>
<p>Code reviews make this infeasible for most software teams.</p>
<h2>Mandatory code reviews encourage long-lived branches</h2>
<p>When merging your work requires another developer to review and approve it, merging <em>will</em> happen less frequently, and pull requests <em>will not</em> shrink beyond a certain size. Dragan Stepanović explains this best in his article <a href="https://www.infoq.com/articles/co-creation-patterns-software-development/">From Async Code Reviews to Co-Creation Patterns</a>.</p>
<p>In short, code reviews introduce long wait times to the integration process. First, after a pull request is opened, the author waits for a review. Then, if the reviewer discovers any issues they think the author should handle, the reviewer waits for the author to respond to the feedback. This cycle repeats some number of times until the reviewer is satisfied and approves the pull request.</p>
<p>These wait times encourage developers to start new work in the meanwhile (increasing work-in-progress), and to batch their changes into larger pull requests. This, again, makes each review take longer, making it harder for developers to find time to review them, and increasing the odds of multiple rounds of review - increasing wait times even more! This vicious cycle results in pull requests often taking multiple days before they are able to be merged.</p>
<p>If a team still tries to make a push for continuous integration in this environment, they are fighting against the stream. The more frequently team members try to integrate, the more often they have to interrupt each other to review and respond to reviews. Developer attention bounces between multiple tasks, flow efficiency (time spent <em>working</em> to time spent <em>waiting</em>) plummets, and productivity drops. Every team will hit a point where the pain of this is too high and will stop integrating their changes any more frequently - typically stopping well short of continuous integration.</p>
<h2>Code reviews are hard to replace</h2>
<p>Many developers who recognize these problems assert that this kind of code review is a net negative and should be done away with altogether. Dave Farley, co-author of <em>Continuous Delivery</em>, insists that <a href="https://www.davefarley.net/?p=247">you are better off not branching at all</a>:</p>
<blockquote>
<ul>
<li>Don't Branch!</li>
<li>Don't Branch!</li>
<li>Don't Branch!</li>
</ul>
</blockquote>
<p>Instead of doing after-the-fact code review, he and others recommend that you support the quality of your software through other practices. The top recommendations are pair programming and mob/ensemble programming, which function as a sort of continuous code review while boosting the flow of work and knowledge sharing within your team. Test-driven development and a &quot;<em><a href="https://www.jamesshore.com/v2/books/aoad2/no_bugs">No Bugs</a></em>&quot;, root-cause eliminating attitude help reduce bug rates even further. By employing these practices, you may achieve better results than relying on code reviews. And I <em>want</em> to believe this.</p>
<p>However, in teams that frequently catch serious errors in code review, <strong>this is hard to sell</strong>. Most developers do not use these alternative practices, and asking people to change the way they work and spend time practicing new skills is a big ask for most teams. Without these changes, slashing code review will in all likelihood lead to more defects being pushed to mainline and escaping to production. Software teams have very reasonable motives for not wanting to do this.</p>
<p>This leaves me conflicted. I cannot in good conscience say that most teams should drop mandatory code reviews and that this will not cause major issues. Yet, I am thoroughly convinced that continuous integration <em>is</em> a better way of working.</p>
<p>Trapped in the middle, I am here to suggest a compromise: <strong>Code reviews should be reduced to their bare essentials.</strong></p>
<h2>Code reviews hurt more the more they try to do</h2>
<p>Here is my line of reasoning:</p>
<ol>
<li>When you look for more things in a code review, it becomes more demanding and time-consuming.</li>
<li>When code reviews get harder, developers will put them off, and wait times will grow.</li>
<li>When wait times grow, branches will live longer and pull requests will get larger, feeding the cycle and causing integration pain.</li>
</ol>
<p><strong>Conclusion:</strong> <em>The more things you look for in a code review, the more you will experience integration pain.</em> Conversely, if you reduce the number of things you look for in a code review, you will be able to integrate your work more frequently. If review gets easy enough, you may even find continuous integration feasible!</p>
<p>With this in mind, it becomes clear that we have made the review process very hard for ourselves. The most common thing to do is to include <em>every possible thing</em> worth having an opinion on in the scope of review. For instance, take <a href="https://google.github.io/eng-practices/review/reviewer/looking-for.html#summary">Google's sumary of what a reviewer should look for</a>:</p>
<blockquote>
<p>In doing a code review, you should make sure that:</p>
<ul>
<li>The code is well-designed.</li>
<li>The functionality is good for the users of the code.</li>
<li>Any UI changes are sensible and look good.</li>
<li>Any parallel programming is done safely.</li>
<li>The code isn’t more complex than it needs to be.</li>
<li>The developer isn’t implementing things they might need in the future but don’t know they need now.</li>
<li>Code has appropriate unit tests.</li>
<li>Tests are well-designed.</li>
<li>The developer used clear names for everything.</li>
<li>Comments are clear and useful, and mostly explain why instead of what.</li>
<li>Code is appropriately documented (generally in g3doc).</li>
<li>The code conforms to our style guides.</li>
</ul>
</blockquote>
<p><strong>This is a lot!</strong> A lot of things to pay attention to while reviewing, a lot to write feedback on, a lot of comments for the author to respond to. Several concerns like code quality and design (and without an authoritative style guide, code style and formatting) are highly subjective, and have a higher chance of causing disagreements, discussions, and multiple rounds of review - skyrocketing wait times.</p>
<p>Not only does this bucket list of concerns make review harder, but discussions of fuzzier, less critical issues drown out discussion of bugs. Quoting <a href="https://en.wikipedia.org/wiki/Code_review#Efficiency_and_effectiveness_of_reviews">the Wikipedia article</a> again:</p>
<blockquote>
<p>Empirical studies provided evidence that up to 75% of code review defects affect software evolvability/maintainability rather than functionality [...] This also means that less than 15% of the issues discussed in code reviews are related to bugs.</p>
</blockquote>
<p>Despite our primary motivation for mandating code review being bug reduction, we spend the majority of our attention on other, less critical issues. Combining this diluted focus with its influence to make pull requests larger, it is likely that trying to improve more things with code review actually makes matters worse.</p>
<h2>Limit your code reviews to the most important concerns</h2>
<p>Since mandatory code reviews cause more issues the more concerns they look for, they should be stripped down to the bare minimum of concerns that must be improved before merge. This will reduce the costs of review while improving its effectiveness for the concerns you do look for. What this bare minimum set is may vary from project to project, and you are free to decide what this is for yourself.</p>
<p><strong>Personally, I am convinced that you should cut any concern from your list that is not externally visible and can be improved later.</strong> This includes:</p>
<ul>
<li>Formatting and code style</li>
<li>Code quality and internal design details</li>
<li>Comments and documentation</li>
<li>Test coverage and quality</li>
</ul>
<p>All of these things are (more or less) valuable, and we want to do them well. However, <strong>none of them are externally visible</strong>, meaning it does not matter to our users if we merge and deploy them to production. Additionally, <strong>all of them can be improved later</strong>, and frequent low-friction integration makes it <em>easier</em> to make such improvements. Including them in review would harm integration frequency, which makes it harder to improve the quality of our codebase when we discover these issues while working.</p>
<p>If a developer opens pull requests that aren't up to snuff on any of these points, you have a couple of alternatives instead of checking it during review:</p>
<ol>
<li><strong>Talk to the developer about it.</strong> Make sure you agree to a common set of standards, and that they have the environment and resources to learn how to fulfill them. This is a longer term solution that will save you frustration in the long run.</li>
<li><strong>Fix it yourself.</strong> If you see room for improvement beyond your team's common set of standards, do it yourself instead of asking the author to do it. It is more effective and efficient, and it contributes to your team's sense of collective code ownership - you all have the right and responsibility to make improvements when you see them. And, since this change is to an issue that should be ignored by reviewers, it should be quick and easy to approve and merge back into mainline.</li>
</ol>
<p>Conversely, changes that are externally visible, or cannot be improved later, are more worth reviewing:</p>
<ul>
<li><strong>Bugs and security issues.</strong> We should ideally never introduce any of these, and we want to minimize the chance of any of them escaping to production.</li>
<li><strong>Design decisions that are hard to undo.</strong> This includes both external API designs (which are very hard to change once they are public), user interface designs, and any changes to functionality. The cost of getting these wrong is high, so it is worth spending extra effort getting them right.</li>
</ul>
<p>By limiting your review scope to these core concerns, you minimize the cost of mandating code reviews, while maintaining quality control on the issues you care the most about.</p>
<p><em>(Limiting and focusing the objective of code review like this also makes it easier to see when code reviews become obsolete - when bug rates drop to acceptable levels pre-review, and when you discuss and refine your irreversible design decisions outside of review. It is very easy to imagine high-performing teams working like this.)</em></p>
<h2>This is a suggested experiment</h2>
<p>While this strategy of cutting the scope of review makes a lot of sense to me, I cannot predict how it will play out for you, in your team, in your circumstances. I do not know to what degree it will make reviews easier and reduce integration pain, and I do not know what unexpected side effects it will have.</p>
<p>What I do believe is that this experiment is low risk, it is not very disruptive, and the potential rewards are great enough that <strong>you should try it out</strong>. Talk it out with your team, find a scope of review to try, trial it for a week or two, then reflect on how it went. If you do not like the results, you can always go back to your old way of working afterwards.</p>
<p><strong>If you try this, or have already tried it, please message me to share your experience!</strong> Contact me on Mastodon at <a href="https://hachyderm.io/@cvennevik">@cvennevik@hachyderm.io</a> (so I can share it further, if you like!), or email me at <a href="mailto:cvennevik@gmail.com">cvennevik@gmail.com</a>.</p>
<p><em>Edit, April 14th 2023: <a href="https://www.cvennevik.no/blog/oops-i-made-code-review-painful/">I wrote a post describing my experience following this idea.</a></em></p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>